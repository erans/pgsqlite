[2m2025-07-27T14:17:24.790914Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m pgsqlite v0.0.11
[2m2025-07-27T14:17:24.796802Z[0m [32m INFO[0m [2mpgsqlite::session::db_handler[0m[2m:[0m New database file detected, running initial migrations...
[2m2025-07-27T14:17:24.799199Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Applying migration 1: Create initial pgsqlite system tables
[2m2025-07-27T14:17:24.799707Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Migration 1 completed in 0ms
[2m2025-07-27T14:17:24.799768Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Applying migration 2: Add PostgreSQL ENUM type support
[2m2025-07-27T14:17:24.800541Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Migration 2 completed in 0ms
[2m2025-07-27T14:17:24.800598Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Applying migration 3: Add datetime format and timezone metadata for PostgreSQL datetime types
[2m2025-07-27T14:17:24.801626Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Migration 3 completed in 0ms
[2m2025-07-27T14:17:24.801685Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Applying migration 4: Convert all datetime types to INTEGER storage using microseconds
[2m2025-07-27T14:17:24.801919Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Migration 4 completed in 0ms
[2m2025-07-27T14:17:24.801974Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Applying migration 5: Create PostgreSQL-compatible catalog tables and views for psql compatibility
[2m2025-07-27T14:17:24.962350Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Migration 5 completed in 160ms
[2m2025-07-27T14:17:24.962420Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Applying migration 6: Add support for VARCHAR/CHAR length constraints
[2m2025-07-27T14:17:24.963333Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Migration 6 completed in 0ms
[2m2025-07-27T14:17:24.963383Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Applying migration 7: Add support for NUMERIC/DECIMAL precision and scale constraints
[2m2025-07-27T14:17:24.963754Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Migration 7 completed in 0ms
[2m2025-07-27T14:17:24.963801Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Applying migration 8: Add support for PostgreSQL array types
[2m2025-07-27T14:17:24.964721Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Migration 8 completed in 0ms
[2m2025-07-27T14:17:24.964769Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Applying migration 9: Add PostgreSQL Full-Text Search support using FTS5
[2m2025-07-27T14:17:24.967112Z[0m [32m INFO[0m [2mpgsqlite::migration::runner[0m[2m:[0m Migration 9 completed in 2ms
[2m2025-07-27T14:17:24.967170Z[0m [32m INFO[0m [2mpgsqlite::session::db_handler[0m[2m:[0m Applied 9 migrations to new database
[2m2025-07-27T14:17:24.967513Z[0m [32m INFO[0m [2mpgsqlite::session::db_handler[0m[2m:[0m DbHandler initialized with mutex-based implementation
[2m2025-07-27T14:17:24.967755Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Unix socket created at: /tmp/.s.PGSQL.5435
[2m2025-07-27T14:17:24.967801Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m TCP server listening on port 5435
[2m2025-07-27T14:17:24.967810Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Using database: sqlalchemy_complete_fix.db
[2m2025-07-27T14:17:24.967816Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m SSL disabled - using unencrypted connections
[2m2025-07-27T14:17:24.969992Z[0m [32m INFO[0m [2mpgsqlite::cache::status[0m[2m:[0m Query Cache Status - Total: 0, Hits: 0 (0.0%), Misses: 0, Evictions: 0, Size: 0/1000
[2m2025-07-27T14:17:38.911527Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m New TCP connection from 127.0.0.1:56590
[2m2025-07-27T14:17:38.911654Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Handling TCP connection from 127.0.0.1:56590
[2m2025-07-27T14:17:38.911734Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Rejected SSL request from 127.0.0.1:56590 (SSL disabled)
[2m2025-07-27T14:17:38.911778Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received startup message from 127.0.0.1:56590: StartupMessage { protocol_version: 196608, parameters: {"user": "postgres", "database": "main"} }
[2m2025-07-27T14:17:38.912015Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Sent authentication and ready response to 127.0.0.1:56590
[2m2025-07-27T14:17:38.912143Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56590: BEGIN
[2m2025-07-27T14:17:38.934593Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:38.966096Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:38.966139Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:38.966260Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56590: DROP TABLE IF EXISTS sqlalchemy_mimic
[2m2025-07-27T14:17:38.968483Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Type mappings count: 0
[2m2025-07-27T14:17:38.968595Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56590: CREATE TABLE sqlalchemy_mimic (id INTEGER PRIMARY KEY, value TEXT)
[2m2025-07-27T14:17:38.976333Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Type mappings count: 2
[2m2025-07-27T14:17:38.976749Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully created/verified __pgsqlite_schema table
[2m2025-07-27T14:17:38.977164Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: sqlalchemy_mimic.id -> INTEGER (INTEGER)
[2m2025-07-27T14:17:38.977406Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: sqlalchemy_mimic.value -> TEXT (TEXT)
[2m2025-07-27T14:17:38.977418Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored type mappings for table sqlalchemy_mimic (simple query protocol)
[2m2025-07-27T14:17:38.977428Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Populating constraints for table: sqlalchemy_mimic
[2m2025-07-27T14:17:39.007602Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Successfully populated constraints for table: sqlalchemy_mimic
[2m2025-07-27T14:17:39.007630Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully populated constraint catalog tables for table: sqlalchemy_mimic
[2m2025-07-27T14:17:39.007753Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56590: INSERT INTO sqlalchemy_mimic (value) VALUES ('original')
[2m2025-07-27T14:17:39.007967Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: INSERT INTO sqlalchemy_mimic (value) VALUES ('original')
[2m2025-07-27T14:17:39.007978Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query does NOT have RETURNING clause: INSERT INTO sqlalchemy_mimic (value) VALUES ('original')
[2m2025-07-27T14:17:39.008409Z[0m [32m INFO[0m [2mpgsqlite::cache::enhanced_statement_pool[0m[2m:[0m Cached new statement for pattern SimpleInsert in 0ms
[2m2025-07-27T14:17:39.008504Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56590: COMMIT
[2m2025-07-27T14:17:39.008537Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing COMMIT command
[2m2025-07-27T14:17:39.008700Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m COMMIT executed successfully
[2m2025-07-27T14:17:39.008711Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint check: session_count=1
[2m2025-07-27T14:17:39.008716Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully acquired connection for WAL checkpoint
[2m2025-07-27T14:17:39.008728Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint(RESTART) executed - forced complete flush
[2m2025-07-27T14:17:39.008747Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to Idle
[2m2025-07-27T14:17:39.008823Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56590: BEGIN
[2m2025-07-27T14:17:39.008847Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:39.008863Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:39.008869Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:39.008928Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56590: UPDATE sqlalchemy_mimic SET value = 'updated' WHERE id = 1
[2m2025-07-27T14:17:39.009190Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: UPDATE sqlalchemy_mimic SET value = 'updated' WHERE id = 1
[2m2025-07-27T14:17:39.009199Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query does NOT have RETURNING clause: UPDATE sqlalchemy_mimic SET value = 'updated' WHERE id = 1
[2m2025-07-27T14:17:39.009622Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56590: COMMIT
[2m2025-07-27T14:17:39.009651Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing COMMIT command
[2m2025-07-27T14:17:39.009686Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m COMMIT executed successfully
[2m2025-07-27T14:17:39.009692Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint check: session_count=1
[2m2025-07-27T14:17:39.009696Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully acquired connection for WAL checkpoint
[2m2025-07-27T14:17:39.009704Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint(RESTART) executed - forced complete flush
[2m2025-07-27T14:17:39.009714Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to Idle
[2m2025-07-27T14:17:39.009783Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56590: BEGIN
[2m2025-07-27T14:17:39.009813Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:39.009828Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:39.009835Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:39.009897Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56590: SELECT value FROM sqlalchemy_mimic WHERE id = 1
[2m2025-07-27T14:17:39.019540Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Column mappings for table 'sqlalchemy_mimic': {}
[2m2025-07-27T14:17:39.019570Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Datetime columns for table 'sqlalchemy_mimic': {}
[2m2025-07-27T14:17:39.019774Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Client 127.0.0.1:56590 requested termination
[2m2025-07-27T14:17:39.019791Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Rolling back active transaction before client disconnect
[2m2025-07-27T14:17:39.019844Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Connection from 127.0.0.1:56590 closed
[2m2025-07-27T14:17:39.020011Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m New TCP connection from 127.0.0.1:56594
[2m2025-07-27T14:17:39.020057Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Handling TCP connection from 127.0.0.1:56594
[2m2025-07-27T14:17:39.020098Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Rejected SSL request from 127.0.0.1:56594 (SSL disabled)
[2m2025-07-27T14:17:39.020147Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received startup message from 127.0.0.1:56594: StartupMessage { protocol_version: 196608, parameters: {"user": "postgres", "database": "main"} }
[2m2025-07-27T14:17:39.020305Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Sent authentication and ready response to 127.0.0.1:56594
[2m2025-07-27T14:17:39.020357Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56594: BEGIN
[2m2025-07-27T14:17:39.020392Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:39.020415Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:39.020423Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:39.020496Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56594: SELECT value FROM sqlalchemy_mimic WHERE id = 1
[2m2025-07-27T14:17:39.034316Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Column mappings for table 'sqlalchemy_mimic': {}
[2m2025-07-27T14:17:39.034343Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Datetime columns for table 'sqlalchemy_mimic': {}
[2m2025-07-27T14:17:39.034575Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Client 127.0.0.1:56594 requested termination
[2m2025-07-27T14:17:39.034596Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Rolling back active transaction before client disconnect
[2m2025-07-27T14:17:39.034640Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Connection from 127.0.0.1:56594 closed
[2m2025-07-27T14:17:47.160082Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m New TCP connection from 127.0.0.1:56598
[2m2025-07-27T14:17:47.160181Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Handling TCP connection from 127.0.0.1:56598
[2m2025-07-27T14:17:47.160235Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Rejected SSL request from 127.0.0.1:56598 (SSL disabled)
[2m2025-07-27T14:17:47.160285Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received startup message from 127.0.0.1:56598: StartupMessage { protocol_version: 196608, parameters: {"database": "main", "user": "postgres"} }
[2m2025-07-27T14:17:47.160470Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Sent authentication and ready response to 127.0.0.1:56598
[2m2025-07-27T14:17:47.160546Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:47.160622Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:47.160665Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:47.160679Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:47.160757Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT t.oid, typarray
FROM pg_type t JOIN pg_namespace ns
    ON typnamespace = ns.oid
WHERE typname = 'hstore';

[2m2025-07-27T14:17:47.160918Z[0m [32m INFO[0m [2mpgsqlite::catalog::query_interceptor[0m[2m:[0m Intercepting catalog query: SELECT t.oid, typarray
FROM pg_type t JOIN pg_namespace ns
    ON typnamespace = ns.oid
WHERE typname = 'hstore';
[2m2025-07-27T14:17:47.171450Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 3 mappings from query
[2m2025-07-27T14:17:47.171519Z[0m [32m INFO[0m [2mpgsqlite::cache::row_description[0m[2m:[0m Initializing RowDescription cache with capacity 1000 and TTL 10 minutes
[2m2025-07-27T14:17:47.195946Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:47.196330Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:47.196356Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:47.196374Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:47.196380Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:47.196443Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: select pg_catalog.version()
[2m2025-07-27T14:17:47.196566Z[0m [32m INFO[0m [2mpgsqlite::catalog::query_interceptor[0m[2m:[0m Intercepting catalog query: select pg_catalog.version()
[2m2025-07-27T14:17:47.197270Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: select current_schema()
[2m2025-07-27T14:17:47.197737Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: show transaction isolation level
[2m2025-07-27T14:17:47.201596Z[0m [32m INFO[0m [2mpgsqlite::query::set_handler[0m[2m:[0m SHOW parameter: TRANSACTION ISOLATION LEVEL
[2m2025-07-27T14:17:47.201617Z[0m [32m INFO[0m [2mpgsqlite::query::set_handler[0m[2m:[0m Parameter TRANSACTION ISOLATION LEVEL = read committed
[2m2025-07-27T14:17:47.201829Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: show standard_conforming_strings
[2m2025-07-27T14:17:47.201908Z[0m [32m INFO[0m [2mpgsqlite::query::set_handler[0m[2m:[0m SHOW parameter: STANDARD_CONFORMING_STRINGS
[2m2025-07-27T14:17:47.201919Z[0m [32m INFO[0m [2mpgsqlite::query::set_handler[0m[2m:[0m Parameter STANDARD_CONFORMING_STRINGS = on
[2m2025-07-27T14:17:47.202044Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:47.202561Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:47.202586Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:47.202602Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:47.202609Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:47.202677Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT version()
[2m2025-07-27T14:17:47.203100Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT current_database()
[2m2025-07-27T14:17:47.203592Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT current_user()
[2m2025-07-27T14:17:47.204024Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT current_schema()
[2m2025-07-27T14:17:47.204367Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:47.206783Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:47.206817Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:47.206836Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:47.206844Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:47.206918Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'users' AND pg_catalog.pg_class.relkind = ANY (ARRAY['r', 'p', 'f', 'v', 'm']) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.335184Z[0m [32m INFO[0m [2mpgsqlite::catalog::query_interceptor[0m[2m:[0m Intercepting catalog query: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'users' AND EXISTS (SELECT 1 FROM json_each('["r","p","f","v","m"]') WHERE value = pg_catalog.pg_class.relkind) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.353410Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 6 mappings from query
[2m2025-07-27T14:17:47.369887Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'categories' AND pg_catalog.pg_class.relkind = ANY (ARRAY['r', 'p', 'f', 'v', 'm']) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.379111Z[0m [32m INFO[0m [2mpgsqlite::catalog::query_interceptor[0m[2m:[0m Intercepting catalog query: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'categories' AND EXISTS (SELECT 1 FROM json_each('["r","p","f","v","m"]') WHERE value = pg_catalog.pg_class.relkind) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.394022Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 6 mappings from query
[2m2025-07-27T14:17:47.410272Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'posts' AND pg_catalog.pg_class.relkind = ANY (ARRAY['r', 'p', 'f', 'v', 'm']) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.419435Z[0m [32m INFO[0m [2mpgsqlite::catalog::query_interceptor[0m[2m:[0m Intercepting catalog query: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'posts' AND EXISTS (SELECT 1 FROM json_each('["r","p","f","v","m"]') WHERE value = pg_catalog.pg_class.relkind) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.434176Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 6 mappings from query
[2m2025-07-27T14:17:47.450242Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'products' AND pg_catalog.pg_class.relkind = ANY (ARRAY['r', 'p', 'f', 'v', 'm']) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.459282Z[0m [32m INFO[0m [2mpgsqlite::catalog::query_interceptor[0m[2m:[0m Intercepting catalog query: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'products' AND EXISTS (SELECT 1 FROM json_each('["r","p","f","v","m"]') WHERE value = pg_catalog.pg_class.relkind) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.473949Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 6 mappings from query
[2m2025-07-27T14:17:47.490007Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'orders' AND pg_catalog.pg_class.relkind = ANY (ARRAY['r', 'p', 'f', 'v', 'm']) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.499078Z[0m [32m INFO[0m [2mpgsqlite::catalog::query_interceptor[0m[2m:[0m Intercepting catalog query: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'orders' AND EXISTS (SELECT 1 FROM json_each('["r","p","f","v","m"]') WHERE value = pg_catalog.pg_class.relkind) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.513711Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 6 mappings from query
[2m2025-07-27T14:17:47.529785Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'order_items' AND pg_catalog.pg_class.relkind = ANY (ARRAY['r', 'p', 'f', 'v', 'm']) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.538827Z[0m [32m INFO[0m [2mpgsqlite::catalog::query_interceptor[0m[2m:[0m Intercepting catalog query: SELECT pg_catalog.pg_class.relname 
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace 
WHERE pg_catalog.pg_class.relname = 'order_items' AND EXISTS (SELECT 1 FROM json_each('["r","p","f","v","m"]') WHERE value = pg_catalog.pg_class.relkind) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != 'pg_catalog'
[2m2025-07-27T14:17:47.553465Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 6 mappings from query
[2m2025-07-27T14:17:47.570051Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: 
CREATE TABLE users (
	id SERIAL NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	email VARCHAR(100) NOT NULL, 
	full_name VARCHAR(100), 
	is_active BOOLEAN, 
	created_at TIMESTAMP WITHOUT TIME ZONE, 
	birth_date DATE, 
	PRIMARY KEY (id), 
	UNIQUE (username), 
	UNIQUE (email)
)


[2m2025-07-27T14:17:47.595668Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Type mappings count: 7
[2m2025-07-27T14:17:47.595754Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully created/verified __pgsqlite_schema table
[2m2025-07-27T14:17:47.596038Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: users.birth_date -> DATE (INTEGER)
[2m2025-07-27T14:17:47.596300Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: users.email -> VARCHAR(100) (TEXT)
[2m2025-07-27T14:17:47.596607Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored string constraint: users.email max_length=100
[2m2025-07-27T14:17:47.596875Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: users.username -> VARCHAR(50) (TEXT)
[2m2025-07-27T14:17:47.597171Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored string constraint: users.username max_length=50
[2m2025-07-27T14:17:47.597466Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: users.id -> SERIAL (INTEGER PRIMARY KEY AUTOINCREMENT)
[2m2025-07-27T14:17:47.597728Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: users.full_name -> VARCHAR(100) (TEXT)
[2m2025-07-27T14:17:47.598025Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored string constraint: users.full_name max_length=100
[2m2025-07-27T14:17:47.598274Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: users.is_active -> BOOLEAN (INTEGER)
[2m2025-07-27T14:17:47.598552Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: users.created_at -> TIMESTAMP WITHOUT TIME ZONE (INTEGER)
[2m2025-07-27T14:17:47.598563Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored type mappings for table users (simple query protocol)
[2m2025-07-27T14:17:47.598574Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Populating constraints for table: users
[2m2025-07-27T14:17:47.602006Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Successfully populated constraints for table: users
[2m2025-07-27T14:17:47.602023Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully populated constraint catalog tables for table: users
[2m2025-07-27T14:17:47.602811Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: 
CREATE TABLE categories (
	id SERIAL NOT NULL, 
	name VARCHAR(50) NOT NULL, 
	description TEXT, 
	created_at TIMESTAMP WITHOUT TIME ZONE, 
	PRIMARY KEY (id), 
	UNIQUE (name)
)


[2m2025-07-27T14:17:47.610275Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Type mappings count: 4
[2m2025-07-27T14:17:47.610340Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully created/verified __pgsqlite_schema table
[2m2025-07-27T14:17:47.610635Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: categories.id -> SERIAL (INTEGER PRIMARY KEY AUTOINCREMENT)
[2m2025-07-27T14:17:47.610895Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: categories.name -> VARCHAR(50) (TEXT)
[2m2025-07-27T14:17:47.611199Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored string constraint: categories.name max_length=50
[2m2025-07-27T14:17:47.611450Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: categories.description -> TEXT (TEXT)
[2m2025-07-27T14:17:47.611735Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: categories.created_at -> TIMESTAMP WITHOUT TIME ZONE (INTEGER)
[2m2025-07-27T14:17:47.611748Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored type mappings for table categories (simple query protocol)
[2m2025-07-27T14:17:47.611759Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Populating constraints for table: categories
[2m2025-07-27T14:17:47.612106Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Successfully populated constraints for table: categories
[2m2025-07-27T14:17:47.612120Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully populated constraint catalog tables for table: categories
[2m2025-07-27T14:17:47.612880Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: 
CREATE TABLE products (
	id SERIAL NOT NULL, 
	name VARCHAR(100) NOT NULL, 
	description TEXT, 
	price NUMERIC(10, 2) NOT NULL, 
	stock_quantity INTEGER, 
	is_available BOOLEAN, 
	created_at TIMESTAMP WITHOUT TIME ZONE, 
	PRIMARY KEY (id)
)


[2m2025-07-27T14:17:47.620745Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Type mappings count: 7
[2m2025-07-27T14:17:47.620811Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully created/verified __pgsqlite_schema table
[2m2025-07-27T14:17:47.621086Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: products.name -> VARCHAR(100) (TEXT)
[2m2025-07-27T14:17:47.621389Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored string constraint: products.name max_length=100
[2m2025-07-27T14:17:47.621659Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: products.description -> TEXT (TEXT)
[2m2025-07-27T14:17:47.621915Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: products.is_available -> BOOLEAN (INTEGER)
[2m2025-07-27T14:17:47.622218Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: products.created_at -> TIMESTAMP WITHOUT TIME ZONE (INTEGER)
[2m2025-07-27T14:17:47.622483Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: products.stock_quantity -> INTEGER (INTEGER)
[2m2025-07-27T14:17:47.622722Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: products.price -> NUMERIC(10,2) (DECIMAL)
[2m2025-07-27T14:17:47.623033Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored numeric constraint: products.price precision=10 scale=2
[2m2025-07-27T14:17:47.623324Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: products.id -> SERIAL (INTEGER PRIMARY KEY AUTOINCREMENT)
[2m2025-07-27T14:17:47.623336Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored type mappings for table products (simple query protocol)
[2m2025-07-27T14:17:47.623347Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Populating constraints for table: products
[2m2025-07-27T14:17:47.623720Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Successfully populated constraints for table: products
[2m2025-07-27T14:17:47.623736Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully populated constraint catalog tables for table: products
[2m2025-07-27T14:17:47.624550Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: 
CREATE TABLE posts (
	id SERIAL NOT NULL, 
	title VARCHAR(200) NOT NULL, 
	content TEXT, 
	author_id INTEGER NOT NULL, 
	category_id INTEGER, 
	created_at TIMESTAMP WITHOUT TIME ZONE, 
	updated_at TIMESTAMP WITHOUT TIME ZONE, 
	view_count INTEGER, 
	is_published BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(author_id) REFERENCES users (id), 
	FOREIGN KEY(category_id) REFERENCES categories (id)
)


[2m2025-07-27T14:17:47.632440Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Type mappings count: 9
[2m2025-07-27T14:17:47.632495Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully created/verified __pgsqlite_schema table
[2m2025-07-27T14:17:47.632741Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: posts.content -> TEXT (TEXT)
[2m2025-07-27T14:17:47.633020Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: posts.id -> SERIAL (INTEGER PRIMARY KEY AUTOINCREMENT)
[2m2025-07-27T14:17:47.633265Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: posts.title -> VARCHAR(200) (TEXT)
[2m2025-07-27T14:17:47.633554Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored string constraint: posts.title max_length=200
[2m2025-07-27T14:17:47.633815Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: posts.category_id -> INTEGER (INTEGER)
[2m2025-07-27T14:17:47.634068Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: posts.author_id -> INTEGER (INTEGER)
[2m2025-07-27T14:17:47.634363Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: posts.created_at -> TIMESTAMP WITHOUT TIME ZONE (INTEGER)
[2m2025-07-27T14:17:47.634616Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: posts.is_published -> BOOLEAN (INTEGER)
[2m2025-07-27T14:17:47.634874Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: posts.view_count -> INTEGER (INTEGER)
[2m2025-07-27T14:17:47.635139Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: posts.updated_at -> TIMESTAMP WITHOUT TIME ZONE (INTEGER)
[2m2025-07-27T14:17:47.635150Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored type mappings for table posts (simple query protocol)
[2m2025-07-27T14:17:47.635159Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Populating constraints for table: posts
[2m2025-07-27T14:17:47.635678Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Successfully populated constraints for table: posts
[2m2025-07-27T14:17:47.635701Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully populated constraint catalog tables for table: posts
[2m2025-07-27T14:17:47.636317Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: 
CREATE TABLE orders (
	id SERIAL NOT NULL, 
	customer_id INTEGER NOT NULL, 
	order_date DATE, 
	order_time TIME WITHOUT TIME ZONE, 
	total_amount NUMERIC(12, 2), 
	status VARCHAR(20), 
	notes TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(customer_id) REFERENCES users (id)
)


[2m2025-07-27T14:17:47.637662Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Type mappings count: 7
[2m2025-07-27T14:17:47.637714Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully created/verified __pgsqlite_schema table
[2m2025-07-27T14:17:47.637965Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: orders.status -> VARCHAR(20) (TEXT)
[2m2025-07-27T14:17:47.638258Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored string constraint: orders.status max_length=20
[2m2025-07-27T14:17:47.638484Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: orders.notes -> TEXT (TEXT)
[2m2025-07-27T14:17:47.638682Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: orders.total_amount -> NUMERIC(12,2) (DECIMAL)
[2m2025-07-27T14:17:47.638971Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored numeric constraint: orders.total_amount precision=12 scale=2
[2m2025-07-27T14:17:47.639246Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: orders.id -> SERIAL (INTEGER PRIMARY KEY AUTOINCREMENT)
[2m2025-07-27T14:17:47.639520Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: orders.order_time -> TIME WITHOUT TIME ZONE (INTEGER)
[2m2025-07-27T14:17:47.639775Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: orders.customer_id -> INTEGER (INTEGER)
[2m2025-07-27T14:17:47.640026Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: orders.order_date -> DATE (INTEGER)
[2m2025-07-27T14:17:47.640037Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored type mappings for table orders (simple query protocol)
[2m2025-07-27T14:17:47.640046Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Populating constraints for table: orders
[2m2025-07-27T14:17:47.640416Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Successfully populated constraints for table: orders
[2m2025-07-27T14:17:47.640428Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully populated constraint catalog tables for table: orders
[2m2025-07-27T14:17:47.640863Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: 
CREATE TABLE order_items (
	id SERIAL NOT NULL, 
	order_id INTEGER NOT NULL, 
	product_id INTEGER NOT NULL, 
	quantity INTEGER NOT NULL, 
	unit_price NUMERIC(10, 2) NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(order_id) REFERENCES orders (id), 
	FOREIGN KEY(product_id) REFERENCES products (id)
)


[2m2025-07-27T14:17:47.641993Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Type mappings count: 5
[2m2025-07-27T14:17:47.642044Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully created/verified __pgsqlite_schema table
[2m2025-07-27T14:17:47.642301Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: order_items.order_id -> INTEGER (INTEGER)
[2m2025-07-27T14:17:47.642584Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: order_items.id -> SERIAL (INTEGER PRIMARY KEY AUTOINCREMENT)
[2m2025-07-27T14:17:47.642841Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: order_items.product_id -> INTEGER (INTEGER)
[2m2025-07-27T14:17:47.643094Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: order_items.quantity -> INTEGER (INTEGER)
[2m2025-07-27T14:17:47.643297Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored metadata: order_items.unit_price -> NUMERIC(10,2) (DECIMAL)
[2m2025-07-27T14:17:47.643585Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored numeric constraint: order_items.unit_price precision=10 scale=2
[2m2025-07-27T14:17:47.643596Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Stored type mappings for table order_items (simple query protocol)
[2m2025-07-27T14:17:47.643604Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Populating constraints for table: order_items
[2m2025-07-27T14:17:47.643960Z[0m [32m INFO[0m [2mpgsqlite::catalog::constraint_populator[0m[2m:[0m Successfully populated constraints for table: order_items
[2m2025-07-27T14:17:47.643974Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully populated constraint catalog tables for table: order_items
[2m2025-07-27T14:17:47.644140Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: COMMIT
[2m2025-07-27T14:17:47.644167Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing COMMIT command
[2m2025-07-27T14:17:47.644392Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m COMMIT executed successfully
[2m2025-07-27T14:17:47.644401Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint check: session_count=1
[2m2025-07-27T14:17:47.644405Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully acquired connection for WAL checkpoint
[2m2025-07-27T14:17:47.644416Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint(RESTART) executed - forced complete flush
[2m2025-07-27T14:17:47.644430Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to Idle
[2m2025-07-27T14:17:47.644839Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:47.644866Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:47.644882Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:47.644890Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:47.644967Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: 
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_type = 'BASE TABLE'
                    ORDER BY table_name
                
[2m2025-07-27T14:17:47.645243Z[0m [32m INFO[0m [2mpgsqlite::catalog::query_interceptor[0m[2m:[0m Intercepting catalog query: SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_type = 'BASE TABLE'
                    ORDER BY table_name
[2m2025-07-27T14:17:47.662272Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:47.675002Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:47.675040Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:47.675063Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:47.675073Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:47.675177Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: INSERT INTO categories (name, description, created_at) SELECT p0::VARCHAR, p1::TEXT, p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
DEBUG find_type_end: after = 'VARCHAR, p1::TEXT, p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1'
DEBUG: Type 'VARCHAR' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO categories (name, description, created_at) SELECT p0::VARCHAR, p1::TEXT, p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
  Current result: INSERT INTO categories (name, description, created_at) SELECT p0::VARCHAR, p1::TEXT, p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
  Looking to replace 'p0::VARCHAR' with 'CAST(p0 AS TEXT)'
DEBUG: Found exact match at position 62
  Replacing 'p0::VARCHAR' with 'CAST(p0 AS TEXT)'
  Result after replacement: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), p1::TEXT, p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
DEBUG find_type_end: after = 'TEXT, p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1'
DEBUG: Type 'TEXT' followed by non-alphanumeric ',', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), p1::TEXT, p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
  Current result: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), p1::TEXT, p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
  Looking to replace 'p1::TEXT' with 'CAST(p1 AS TEXT)'
DEBUG: Found exact match at position 80
  Replacing 'p1::TEXT' with 'CAST(p1 AS TEXT)'
  Result after replacement: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
DEBUG find_type_end: after = 'TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1'
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
  Current result: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
  Looking to replace 'p2::TIMESTAMP WITHOUT TIME ZONE' with 'pg_timestamp_from_text(p2)'
DEBUG: Found exact match at position 98
  Replacing 'p2::TIMESTAMP WITHOUT TIME ZONE' with 'pg_timestamp_from_text(p2)'
  Result after replacement: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), pg_timestamp_from_text(p2) FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
DEBUG find_type_end: after = 'timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), pg_timestamp_from_text(p2) FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
  Current result: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), pg_timestamp_from_text(p2) FROM (VALUES ('Technology', 'Posts about technology and programming', '2025-07-27T14:17:47.674667'::timestamp, 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.674667'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.674667')'
DEBUG: Found exact match at position 195
  Replacing ''2025-07-27T14:17:47.674667'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.674667')'
  Result after replacement: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), pg_timestamp_from_text(p2) FROM (VALUES ('Technology', 'Posts about technology and programming', pg_timestamp_from_text('2025-07-27T14:17:47.674667'), 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
DEBUG find_type_end: after = 'timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), pg_timestamp_from_text(p2) FROM (VALUES ('Technology', 'Posts about technology and programming', pg_timestamp_from_text('2025-07-27T14:17:47.674667'), 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
  Current result: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), pg_timestamp_from_text(p2) FROM (VALUES ('Technology', 'Posts about technology and programming', pg_timestamp_from_text('2025-07-27T14:17:47.674667'), 0), ('Lifestyle', 'Posts about lifestyle and personal development', '2025-07-27T14:17:47.674671'::timestamp, 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.674671'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.674671')'
DEBUG: Found exact match at position 317
  Replacing ''2025-07-27T14:17:47.674671'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.674671')'
  Result after replacement: INSERT INTO categories (name, description, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), pg_timestamp_from_text(p2) FROM (VALUES ('Technology', 'Posts about technology and programming', pg_timestamp_from_text('2025-07-27T14:17:47.674667'), 0), ('Lifestyle', 'Posts about lifestyle and personal development', pg_timestamp_from_text('2025-07-27T14:17:47.674671'), 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
🎯 SQLAlchemy VALUES pattern detected, converting to UNION ALL
   Table: categories
   Columns: ["name", "description", "created_at"]
   Select clause: CAST(p0 AS TEXT), CAST(p1 AS TEXT), pg_timestamp_from_text(p2) FROM (VALUES ('Technology', 'Posts about technology and programming', pg_timestamp_from_text('2025-07-27T14:17:47.674667'), 0), ('Lifestyle', 'Posts about lifestyle and personal development', pg_timestamp_from_text('2025-07-27T14:17:47.674671'), 1)) AS imp_sen(p0, p1, p2, sen_counter) ORDER BY sen_counter RETURNING categories.id, categories.id AS id__1
   🔍 Type casts: [Some("TEXT"), Some("TEXT"), None]
   📦 Parsed 2 rows from VALUES clause
   Final SELECT: CAST('Technology' AS TEXT), CAST('Posts about technology and programming' AS TEXT), pg_timestamp_from_text('2025-07-27T14:17:47.674667') UNION ALL SELECT CAST('Lifestyle' AS TEXT), CAST('Posts about lifestyle and personal development' AS TEXT), pg_timestamp_from_text('2025-07-27T14:17:47.674671') RETURNING categories.id, categories.id AS id__1
[2m2025-07-27T14:17:47.690240Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: INSERT INTO categories (name, description, created_at) SELECT CAST('Technology' AS TEXT), CAST('Posts about technology and programming' AS TEXT), pg_timestamp_from_text('2025-07-27T14:17:47.674667') UNION ALL SELECT CAST('Lifestyle' AS TEXT), CAST('Posts about lifestyle and personal development' AS TEXT), pg_timestamp_from_text('2025-07-27T14:17:47.674671') RETURNING categories.id, categories.id AS id__1
[2m2025-07-27T14:17:47.690257Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query has RETURNING clause, using execute_dml_with_returning: INSERT INTO categories (name, description, created_at) SELECT CAST('Technology' AS TEXT), CAST('Posts about technology and programming' AS TEXT), pg_timestamp_from_text('2025-07-27T14:17:47.674667') UNION ALL SELECT CAST('Lifestyle' AS TEXT), CAST('Posts about lifestyle and personal development' AS TEXT), pg_timestamp_from_text('2025-07-27T14:17:47.674671') RETURNING categories.id, categories.id AS id__1
[2m2025-07-27T14:17:47.692391Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT p0::VARCHAR, p1::VARCHAR, p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'VARCHAR, p1::VARCHAR, p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1'
DEBUG: Type 'VARCHAR' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT p0::VARCHAR, p1::VARCHAR, p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT p0::VARCHAR, p1::VARCHAR, p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Looking to replace 'p0::VARCHAR' with 'CAST(p0 AS TEXT)'
DEBUG: Found exact match at position 89
  Replacing 'p0::VARCHAR' with 'CAST(p0 AS TEXT)'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), p1::VARCHAR, p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'VARCHAR, p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1'
DEBUG: Type 'VARCHAR' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), p1::VARCHAR, p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), p1::VARCHAR, p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Looking to replace 'p1::VARCHAR' with 'CAST(p1 AS TEXT)'
DEBUG: Found exact match at position 107
  Replacing 'p1::VARCHAR' with 'CAST(p1 AS TEXT)'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1'
DEBUG: Type 'VARCHAR' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::VARCHAR, p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Looking to replace 'p2::VARCHAR' with 'CAST(p2 AS TEXT)'
DEBUG: Found exact match at position 125
  Replacing 'p2::VARCHAR' with 'CAST(p2 AS TEXT)'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1'
DEBUG: Type 'BOOLEAN' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), p3::BOOLEAN, p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Looking to replace 'p3::BOOLEAN' with 'CAST(p3 AS INTEGER)'
DEBUG: Found exact match at position 143
  Replacing 'p3::BOOLEAN' with 'CAST(p3 AS INTEGER)'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1'
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), p4::TIMESTAMP WITHOUT TIME ZONE, p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Looking to replace 'p4::TIMESTAMP WITHOUT TIME ZONE' with 'pg_timestamp_from_text(p4)'
DEBUG: Found exact match at position 164
  Replacing 'p4::TIMESTAMP WITHOUT TIME ZONE' with 'pg_timestamp_from_text(p4)'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1'
DEBUG: Type 'DATE' followed by non-alphanumeric ' ', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), p5::DATE FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Looking to replace 'p5::DATE' with 'pg_date_from_text(p5)'
DEBUG: Found exact match at position 192
  Replacing 'p5::DATE' with 'pg_date_from_text(p5)'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, '2025-07-27T14:17:47.692016'::timestamp, '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.692016'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.692016')'
DEBUG: Found exact match at position 285
  Replacing ''2025-07-27T14:17:47.692016'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.692016')'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1'
DEBUG: Type 'DATE' followed by non-alphanumeric ',', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), '1990-05-15'::date, 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Looking to replace ''1990-05-15'::date' with 'pg_date_from_text('1990-05-15')'
DEBUG: Found exact match at position 339
  Replacing ''1990-05-15'::date' with 'pg_date_from_text('1990-05-15')'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15'), 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15'), 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15'), 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, '2025-07-27T14:17:47.692018'::timestamp, '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.692018'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.692018')'
DEBUG: Found exact match at position 429
  Replacing ''2025-07-27T14:17:47.692018'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.692018')'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15'), 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, pg_timestamp_from_text('2025-07-27T14:17:47.692018'), '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1'
DEBUG: Type 'DATE' followed by non-alphanumeric ',', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15'), 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, pg_timestamp_from_text('2025-07-27T14:17:47.692018'), '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15'), 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, pg_timestamp_from_text('2025-07-27T14:17:47.692018'), '1985-10-22'::date, 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
  Looking to replace ''1985-10-22'::date' with 'pg_date_from_text('1985-10-22')'
DEBUG: Found exact match at position 483
  Replacing ''1985-10-22'::date' with 'pg_date_from_text('1985-10-22')'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15'), 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22'), 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
🎯 SQLAlchemy VALUES pattern detected, converting to UNION ALL
   Table: users
   Columns: ["username", "email", "full_name", "is_active", "created_at", "birth_date"]
   Select clause: CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS TEXT), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_date_from_text(p5) FROM (VALUES ('alice_dev', 'alice@example.com', 'Alice Johnson', true, pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15'), 0), ('bob_writer', 'bob@example.com', 'Bob Smith', true, pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22'), 1), ('charlie_inactive', 'charlie@example.com', 'Charlie Brown', false, '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
   🔍 Type casts: [Some("TEXT"), Some("TEXT"), Some("TEXT"), Some("INTEGER"), None, None]
   📦 Parsed 3 rows from VALUES clause
   Final SELECT: CAST('alice_dev' AS TEXT), CAST('alice@example.com' AS TEXT), CAST('Alice Johnson' AS TEXT), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15') UNION ALL SELECT CAST('bob_writer' AS TEXT), CAST('bob@example.com' AS TEXT), CAST('Bob Smith' AS TEXT), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22') UNION ALL SELECT CAST('charlie_inactive' AS TEXT), CAST('charlie@example.com' AS TEXT), CAST('Charlie Brown' AS TEXT), CAST(false AS INTEGER), '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date RETURNING users.id, users.id AS id__1
[2m2025-07-27T14:17:47.696558Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST('alice_dev' AS TEXT), CAST('alice@example.com' AS TEXT), CAST('Alice Johnson' AS TEXT), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15') UNION ALL SELECT CAST('bob_writer' AS TEXT), CAST('bob@example.com' AS TEXT), CAST('Bob Smith' AS TEXT), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22') UNION ALL SELECT CAST('charlie_inactive' AS TEXT), CAST('charlie@example.com' AS TEXT), CAST('Charlie Brown' AS TEXT), CAST(false AS INTEGER), '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date RETURNING users.id, users.id AS id__1
[2m2025-07-27T14:17:47.696580Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query has RETURNING clause, using execute_dml_with_returning: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST('alice_dev' AS TEXT), CAST('alice@example.com' AS TEXT), CAST('Alice Johnson' AS TEXT), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15') UNION ALL SELECT CAST('bob_writer' AS TEXT), CAST('bob@example.com' AS TEXT), CAST('Bob Smith' AS TEXT), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22') UNION ALL SELECT CAST('charlie_inactive' AS TEXT), CAST('charlie@example.com' AS TEXT), CAST('Charlie Brown' AS TEXT), CAST(false AS INTEGER), '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'timestamp, '1995-03-08'::date RETURNING users.id, users.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT CAST('alice_dev' AS TEXT), CAST('alice@example.com' AS TEXT), CAST('Alice Johnson' AS TEXT), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15') UNION ALL SELECT CAST('bob_writer' AS TEXT), CAST('bob@example.com' AS TEXT), CAST('Bob Smith' AS TEXT), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22') UNION ALL SELECT CAST('charlie_inactive' AS TEXT), CAST('charlie@example.com' AS TEXT), CAST('Charlie Brown' AS TEXT), CAST(false AS INTEGER), '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT 'alice_dev', 'alice@example.com', 'Alice Johnson', CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15') UNION ALL SELECT 'bob_writer', 'bob@example.com', 'Bob Smith', CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22') UNION ALL SELECT 'charlie_inactive', 'charlie@example.com', 'Charlie Brown', CAST(false AS INTEGER), '2025-07-27T14:17:47.692019'::timestamp, '1995-03-08'::date RETURNING users.id, users.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.692019'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.692019')'
DEBUG: Found exact match at position 522
  Replacing ''2025-07-27T14:17:47.692019'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.692019')'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT 'alice_dev', 'alice@example.com', 'Alice Johnson', CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15') UNION ALL SELECT 'bob_writer', 'bob@example.com', 'Bob Smith', CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22') UNION ALL SELECT 'charlie_inactive', 'charlie@example.com', 'Charlie Brown', CAST(false AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692019'), '1995-03-08'::date RETURNING users.id, users.id AS id__1
DEBUG find_type_end: after = 'date RETURNING users.id, users.id AS id__1'
DEBUG: Type 'DATE' followed by non-alphanumeric ' ', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT 'alice_dev', 'alice@example.com', 'Alice Johnson', CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15') UNION ALL SELECT 'bob_writer', 'bob@example.com', 'Bob Smith', CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22') UNION ALL SELECT 'charlie_inactive', 'charlie@example.com', 'Charlie Brown', CAST(false AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692019'), '1995-03-08'::date RETURNING users.id, users.id AS id__1
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT 'alice_dev', 'alice@example.com', 'Alice Johnson', CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15') UNION ALL SELECT 'bob_writer', 'bob@example.com', 'Bob Smith', CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22') UNION ALL SELECT 'charlie_inactive', 'charlie@example.com', 'Charlie Brown', CAST(false AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692019'), '1995-03-08'::date RETURNING users.id, users.id AS id__1
  Looking to replace ''1995-03-08'::date' with 'pg_date_from_text('1995-03-08')'
DEBUG: Found exact match at position 576
  Replacing ''1995-03-08'::date' with 'pg_date_from_text('1995-03-08')'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) SELECT 'alice_dev', 'alice@example.com', 'Alice Johnson', CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692016'), pg_date_from_text('1990-05-15') UNION ALL SELECT 'bob_writer', 'bob@example.com', 'Bob Smith', CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692018'), pg_date_from_text('1985-10-22') UNION ALL SELECT 'charlie_inactive', 'charlie@example.com', 'Charlie Brown', CAST(false AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.692019'), pg_date_from_text('1995-03-08') RETURNING users.id, users.id AS id__1
[2m2025-07-27T14:17:47.707775Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT p0::VARCHAR, p1::TEXT, p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'VARCHAR, p1::TEXT, p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'VARCHAR' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT p0::VARCHAR, p1::TEXT, p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT p0::VARCHAR, p1::TEXT, p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Looking to replace 'p0::VARCHAR' with 'CAST(p0 AS TEXT)'
DEBUG: Found exact match at position 116
  Replacing 'p0::VARCHAR' with 'CAST(p0 AS TEXT)'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), p1::TEXT, p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'TEXT, p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'TEXT' followed by non-alphanumeric ',', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), p1::TEXT, p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), p1::TEXT, p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Looking to replace 'p1::TEXT' with 'CAST(p1 AS TEXT)'
DEBUG: Found exact match at position 134
  Replacing 'p1::TEXT' with 'CAST(p1 AS TEXT)'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'INTEGER' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::INTEGER, p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Looking to replace 'p2::INTEGER' with 'CAST(p2 AS INTEGER)'
DEBUG: Found exact match at position 152
  Replacing 'p2::INTEGER' with 'CAST(p2 AS INTEGER)'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'INTEGER' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), p3::INTEGER, p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Looking to replace 'p3::INTEGER' with 'CAST(p3 AS INTEGER)'
DEBUG: Found exact match at position 173
  Replacing 'p3::INTEGER' with 'CAST(p3 AS INTEGER)'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1'
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), p4::TIMESTAMP WITHOUT TIME ZONE, p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Looking to replace 'p4::TIMESTAMP WITHOUT TIME ZONE' with 'pg_timestamp_from_text(p4)'
DEBUG: Found exact match at position 194
  Replacing 'p4::TIMESTAMP WITHOUT TIME ZONE' with 'pg_timestamp_from_text(p4)'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1'
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), p5::TIMESTAMP WITHOUT TIME ZONE, p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Looking to replace 'p5::TIMESTAMP WITHOUT TIME ZONE' with 'pg_timestamp_from_text(p5)'
DEBUG: Found exact match at position 222
  Replacing 'p5::TIMESTAMP WITHOUT TIME ZONE' with 'pg_timestamp_from_text(p5)'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'INTEGER' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), p6::INTEGER, p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Looking to replace 'p6::INTEGER' with 'CAST(p6 AS INTEGER)'
DEBUG: Found exact match at position 250
  Replacing 'p6::INTEGER' with 'CAST(p6 AS INTEGER)'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'BOOLEAN' followed by non-alphanumeric ' ', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), p7::BOOLEAN FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Looking to replace 'p7::BOOLEAN' with 'CAST(p7 AS INTEGER)'
DEBUG: Found exact match at position 271
  Replacing 'p7::BOOLEAN' with 'CAST(p7 AS INTEGER)'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), CAST(p7 AS INTEGER) FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), CAST(p7 AS INTEGER) FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), CAST(p7 AS INTEGER) FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, '2025-07-27T14:17:47.707313'::timestamp, '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.707313'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707313')'
DEBUG: Found exact match at position 388
  Replacing ''2025-07-27T14:17:47.707313'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707313')'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), CAST(p7 AS INTEGER) FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, pg_timestamp_from_text('2025-07-27T14:17:47.707313'), '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), CAST(p7 AS INTEGER) FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, pg_timestamp_from_text('2025-07-27T14:17:47.707313'), '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), CAST(p7 AS INTEGER) FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, pg_timestamp_from_text('2025-07-27T14:17:47.707313'), '2025-07-27T14:17:47.707317'::timestamp, 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.707317'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707317')'
DEBUG: Found exact match at position 442
  Replacing ''2025-07-27T14:17:47.707317'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707317')'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), CAST(p7 AS INTEGER) FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
🎯 SQLAlchemy VALUES pattern detected, converting to UNION ALL
   Table: posts
   Columns: ["title", "content", "author_id", "category_id", "created_at", "updated_at", "view_count", "is_published"]
   Select clause: CAST(p0 AS TEXT), CAST(p1 AS TEXT), CAST(p2 AS INTEGER), CAST(p3 AS INTEGER), pg_timestamp_from_text(p4), pg_timestamp_from_text(p5), CAST(p6 AS INTEGER), CAST(p7 AS INTEGER) FROM (VALUES ('Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', 1, 1, pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), 150, true, 0), ('PostgreSQL vs SQLite', 'Comparing two popular database systems...', 1, 1, '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, 89, true, 1), ('Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', 2, 2, '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, 245, true, 2), ('Draft: Future of AI', 'This is a draft post about AI...', 2, 1, '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, 5, false, 3)) AS imp_sen(p0, p1, p2, p3, p4, p5, p6, p7, sen_counter) ORDER BY sen_counter RETURNING posts.id, posts.id AS id__1
   🔍 Type casts: [Some("TEXT"), Some("TEXT"), Some("INTEGER"), Some("INTEGER"), None, None, Some("INTEGER"), Some("INTEGER")]
   📦 Parsed 4 rows from VALUES clause
   Final SELECT: CAST('Getting Started with SQLAlchemy' AS TEXT), CAST('SQLAlchemy is a powerful Python ORM...' AS TEXT), CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('PostgreSQL vs SQLite' AS TEXT), CAST('Comparing two popular database systems...' AS TEXT), CAST(1 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('Work-Life Balance Tips' AS TEXT), CAST('How to maintain a healthy work-life balance...' AS TEXT), CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('Draft: Future of AI' AS TEXT), CAST('This is a draft post about AI...' AS TEXT), CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
[2m2025-07-27T14:17:47.712641Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST('Getting Started with SQLAlchemy' AS TEXT), CAST('SQLAlchemy is a powerful Python ORM...' AS TEXT), CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('PostgreSQL vs SQLite' AS TEXT), CAST('Comparing two popular database systems...' AS TEXT), CAST(1 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('Work-Life Balance Tips' AS TEXT), CAST('How to maintain a healthy work-life balance...' AS TEXT), CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('Draft: Future of AI' AS TEXT), CAST('This is a draft post about AI...' AS TEXT), CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
[2m2025-07-27T14:17:47.712661Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query has RETURNING clause, using execute_dml_with_returning: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST('Getting Started with SQLAlchemy' AS TEXT), CAST('SQLAlchemy is a powerful Python ORM...' AS TEXT), CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('PostgreSQL vs SQLite' AS TEXT), CAST('Comparing two popular database systems...' AS TEXT), CAST(1 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('Work-Life Balance Tips' AS TEXT), CAST('How to maintain a healthy work-life balance...' AS TEXT), CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('Draft: Future of AI' AS TEXT), CAST('This is a draft post about AI...' AS TEXT), CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'timestamp, '2025-07-27T14:17:47.707319'::timestamp, CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT CAST('Getting Started with SQLAlchemy' AS TEXT), CAST('SQLAlchemy is a powerful Python ORM...' AS TEXT), CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('PostgreSQL vs SQLite' AS TEXT), CAST('Comparing two popular database systems...' AS TEXT), CAST(1 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('Work-Life Balance Tips' AS TEXT), CAST('How to maintain a healthy work-life balance...' AS TEXT), CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT CAST('Draft: Future of AI' AS TEXT), CAST('This is a draft post about AI...' AS TEXT), CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707318'::timestamp, '2025-07-27T14:17:47.707319'::timestamp, CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.707318'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707318')'
DEBUG: Found exact match at position 511
  Replacing ''2025-07-27T14:17:47.707318'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707318')'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), '2025-07-27T14:17:47.707319'::timestamp, CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'timestamp, CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), '2025-07-27T14:17:47.707319'::timestamp, CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), '2025-07-27T14:17:47.707319'::timestamp, CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.707319'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707319')'
DEBUG: Found exact match at position 565
  Replacing ''2025-07-27T14:17:47.707319'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707319')'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), '2025-07-27T14:17:47.707321'::timestamp, '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.707321'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707321')'
DEBUG: Found exact match at position 795
  Replacing ''2025-07-27T14:17:47.707321'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707321')'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707321'), '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707321'), '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707321'), '2025-07-27T14:17:47.707322'::timestamp, CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.707322'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707322')'
DEBUG: Found exact match at position 849
  Replacing ''2025-07-27T14:17:47.707322'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707322')'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707321'), pg_timestamp_from_text('2025-07-27T14:17:47.707322'), CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707321'), pg_timestamp_from_text('2025-07-27T14:17:47.707322'), CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707321'), pg_timestamp_from_text('2025-07-27T14:17:47.707322'), CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), '2025-07-27T14:17:47.707323'::timestamp, '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.707323'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707323')'
DEBUG: Found exact match at position 1063
  Replacing ''2025-07-27T14:17:47.707323'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707323')'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707321'), pg_timestamp_from_text('2025-07-27T14:17:47.707322'), CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707323'), '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
DEBUG find_type_end: after = 'timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707321'), pg_timestamp_from_text('2025-07-27T14:17:47.707322'), CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707323'), '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Current result: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707321'), pg_timestamp_from_text('2025-07-27T14:17:47.707322'), CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707323'), '2025-07-27T14:17:47.707324'::timestamp, CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.707324'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707324')'
DEBUG: Found exact match at position 1117
  Replacing ''2025-07-27T14:17:47.707324'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.707324')'
  Result after replacement: INSERT INTO posts (title, content, author_id, category_id, created_at, updated_at, view_count, is_published) SELECT 'Getting Started with SQLAlchemy', 'SQLAlchemy is a powerful Python ORM...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707313'), pg_timestamp_from_text('2025-07-27T14:17:47.707317'), CAST(150 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'PostgreSQL vs SQLite', 'Comparing two popular database systems...', CAST(1 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707318'), pg_timestamp_from_text('2025-07-27T14:17:47.707319'), CAST(89 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Work-Life Balance Tips', 'How to maintain a healthy work-life balance...', CAST(2 AS INTEGER), CAST(2 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707321'), pg_timestamp_from_text('2025-07-27T14:17:47.707322'), CAST(245 AS INTEGER), CAST(true AS INTEGER) UNION ALL SELECT 'Draft: Future of AI', 'This is a draft post about AI...', CAST(2 AS INTEGER), CAST(1 AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.707323'), pg_timestamp_from_text('2025-07-27T14:17:47.707324'), CAST(5 AS INTEGER), CAST(false AS INTEGER) RETURNING posts.id, posts.id AS id__1
[2m2025-07-27T14:17:47.720672Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT p0::VARCHAR, p1::TEXT, p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
DEBUG find_type_end: after = 'VARCHAR, p1::TEXT, p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1'
DEBUG: Type 'VARCHAR' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT p0::VARCHAR, p1::TEXT, p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Current result: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT p0::VARCHAR, p1::TEXT, p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Looking to replace 'p0::VARCHAR' with 'CAST(p0 AS TEXT)'
DEBUG: Found exact match at position 97
  Replacing 'p0::VARCHAR' with 'CAST(p0 AS TEXT)'
  Result after replacement: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), p1::TEXT, p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
DEBUG find_type_end: after = 'TEXT, p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1'
DEBUG: Type 'TEXT' followed by non-alphanumeric ',', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), p1::TEXT, p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Current result: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), p1::TEXT, p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Looking to replace 'p1::TEXT' with 'CAST(p1 AS TEXT)'
DEBUG: Found exact match at position 115
  Replacing 'p1::TEXT' with 'CAST(p1 AS TEXT)'
  Result after replacement: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
DEBUG find_type_end: after = 'NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1'
DEBUG: Type 'NUMERIC' followed by non-alphanumeric '(', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Current result: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2::NUMERIC(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Looking to replace 'p2::NUMERIC' with 'p2'
DEBUG: Found exact match at position 133
  Replacing 'p2::NUMERIC' with 'p2'
  Result after replacement: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
DEBUG find_type_end: after = 'INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1'
DEBUG: Type 'INTEGER' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Current result: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), p3::INTEGER, p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Looking to replace 'p3::INTEGER' with 'CAST(p3 AS INTEGER)'
DEBUG: Found exact match at position 144
  Replacing 'p3::INTEGER' with 'CAST(p3 AS INTEGER)'
  Result after replacement: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
DEBUG find_type_end: after = 'BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1'
DEBUG: Type 'BOOLEAN' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Current result: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), p4::BOOLEAN, p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Looking to replace 'p4::BOOLEAN' with 'CAST(p4 AS INTEGER)'
DEBUG: Found exact match at position 165
  Replacing 'p4::BOOLEAN' with 'CAST(p4 AS INTEGER)'
  Result after replacement: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
DEBUG find_type_end: after = 'TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1'
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Current result: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), p5::TIMESTAMP WITHOUT TIME ZONE FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Looking to replace 'p5::TIMESTAMP WITHOUT TIME ZONE' with 'pg_timestamp_from_text(p5)'
DEBUG: Found exact match at position 186
  Replacing 'p5::TIMESTAMP WITHOUT TIME ZONE' with 'pg_timestamp_from_text(p5)'
  Result after replacement: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
DEBUG find_type_end: after = 'timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Current result: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, '2025-07-27T14:17:47.720368'::timestamp, 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.720368'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.720368')'
DEBUG: Found exact match at position 302
  Replacing ''2025-07-27T14:17:47.720368'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.720368')'
  Result after replacement: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, pg_timestamp_from_text('2025-07-27T14:17:47.720368'), 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
DEBUG find_type_end: after = 'timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, pg_timestamp_from_text('2025-07-27T14:17:47.720368'), 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Current result: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, pg_timestamp_from_text('2025-07-27T14:17:47.720368'), 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, '2025-07-27T14:17:47.720370'::timestamp, 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.720370'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.720370')'
DEBUG: Found exact match at position 425
  Replacing ''2025-07-27T14:17:47.720370'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.720370')'
  Result after replacement: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, pg_timestamp_from_text('2025-07-27T14:17:47.720368'), 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, pg_timestamp_from_text('2025-07-27T14:17:47.720370'), 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
DEBUG find_type_end: after = 'timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, pg_timestamp_from_text('2025-07-27T14:17:47.720368'), 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, pg_timestamp_from_text('2025-07-27T14:17:47.720370'), 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Current result: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, pg_timestamp_from_text('2025-07-27T14:17:47.720368'), 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, pg_timestamp_from_text('2025-07-27T14:17:47.720370'), 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, '2025-07-27T14:17:47.720371'::timestamp, 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
  Looking to replace ''2025-07-27T14:17:47.720371'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.720371')'
DEBUG: Found exact match at position 552
  Replacing ''2025-07-27T14:17:47.720371'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:47.720371')'
  Result after replacement: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, pg_timestamp_from_text('2025-07-27T14:17:47.720368'), 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, pg_timestamp_from_text('2025-07-27T14:17:47.720370'), 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, pg_timestamp_from_text('2025-07-27T14:17:47.720371'), 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
🎯 SQLAlchemy VALUES pattern detected, converting to UNION ALL
   Table: products
   Columns: ["name", "description", "price", "stock_quantity", "is_available", "created_at"]
   Select clause: CAST(p0 AS TEXT), CAST(p1 AS TEXT), p2(10, 2), CAST(p3 AS INTEGER), CAST(p4 AS INTEGER), pg_timestamp_from_text(p5) FROM (VALUES ('Laptop Pro', 'High-performance laptop for developers', 1299.99, 25, true, pg_timestamp_from_text('2025-07-27T14:17:47.720368'), 0), ('Wireless Mouse', 'Ergonomic wireless mouse', 49.99, 100, true, pg_timestamp_from_text('2025-07-27T14:17:47.720370'), 1), ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.50, 0, false, pg_timestamp_from_text('2025-07-27T14:17:47.720371'), 2)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING products.id, products.id AS id__1
   🔍 Type casts: [Some("TEXT"), Some("TEXT"), None, Some("INTEGER"), Some("INTEGER"), None]
   📦 Parsed 3 rows from VALUES clause
   Final SELECT: CAST('Laptop Pro' AS TEXT), CAST('High-performance laptop for developers' AS TEXT), 1299.99, CAST(25 AS INTEGER), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.720368') UNION ALL SELECT CAST('Wireless Mouse' AS TEXT), CAST('Ergonomic wireless mouse' AS TEXT), 49.99, CAST(100 AS INTEGER), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.720370') UNION ALL SELECT CAST('Mechanical Keyboard' AS TEXT), CAST('RGB mechanical keyboard' AS TEXT), 129.50, CAST(0 AS INTEGER), CAST(false AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.720371') RETURNING products.id, products.id AS id__1
[2m2025-07-27T14:17:47.735358Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST('Laptop Pro' AS TEXT), CAST('High-performance laptop for developers' AS TEXT), 1299.99, CAST(25 AS INTEGER), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.720368') UNION ALL SELECT CAST('Wireless Mouse' AS TEXT), CAST('Ergonomic wireless mouse' AS TEXT), 49.99, CAST(100 AS INTEGER), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.720370') UNION ALL SELECT CAST('Mechanical Keyboard' AS TEXT), CAST('RGB mechanical keyboard' AS TEXT), 129.50, CAST(0 AS INTEGER), CAST(false AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.720371') RETURNING products.id, products.id AS id__1
[2m2025-07-27T14:17:47.735381Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query has RETURNING clause, using execute_dml_with_returning: INSERT INTO products (name, description, price, stock_quantity, is_available, created_at) SELECT CAST('Laptop Pro' AS TEXT), CAST('High-performance laptop for developers' AS TEXT), 1299.99, CAST(25 AS INTEGER), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.720368') UNION ALL SELECT CAST('Wireless Mouse' AS TEXT), CAST('Ergonomic wireless mouse' AS TEXT), 49.99, CAST(100 AS INTEGER), CAST(true AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.720370') UNION ALL SELECT CAST('Mechanical Keyboard' AS TEXT), CAST('RGB mechanical keyboard' AS TEXT), 129.50, CAST(0 AS INTEGER), CAST(false AS INTEGER), pg_timestamp_from_text('2025-07-27T14:17:47.720371') RETURNING products.id, products.id AS id__1
[2m2025-07-27T14:17:47.737795Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT p0::INTEGER, p1::DATE, p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
DEBUG find_type_end: after = 'INTEGER, p1::DATE, p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1'
DEBUG: Type 'INTEGER' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT p0::INTEGER, p1::DATE, p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Current result: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT p0::INTEGER, p1::DATE, p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Looking to replace 'p0::INTEGER' with 'CAST(p0 AS INTEGER)'
DEBUG: Found exact match at position 93
  Replacing 'p0::INTEGER' with 'CAST(p0 AS INTEGER)'
  Result after replacement: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), p1::DATE, p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
DEBUG find_type_end: after = 'DATE, p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1'
DEBUG: Type 'DATE' followed by non-alphanumeric ',', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), p1::DATE, p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Current result: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), p1::DATE, p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Looking to replace 'p1::DATE' with 'pg_date_from_text(p1)'
DEBUG: Found exact match at position 114
  Replacing 'p1::DATE' with 'pg_date_from_text(p1)'
  Result after replacement: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
DEBUG find_type_end: after = 'TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1'
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Current result: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), p2::TIME WITHOUT TIME ZONE, p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Looking to replace 'p2::TIME WITHOUT TIME ZONE' with 'pg_time_from_text(p2)'
DEBUG: Found exact match at position 137
  Replacing 'p2::TIME WITHOUT TIME ZONE' with 'pg_time_from_text(p2)'
  Result after replacement: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
DEBUG find_type_end: after = 'NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1'
DEBUG: Type 'NUMERIC' followed by non-alphanumeric '(', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Current result: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3::NUMERIC(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Looking to replace 'p3::NUMERIC' with 'p3'
DEBUG: Found exact match at position 160
  Replacing 'p3::NUMERIC' with 'p3'
  Result after replacement: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
DEBUG find_type_end: after = 'VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1'
DEBUG: Type 'VARCHAR' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Current result: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), p4::VARCHAR, p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Looking to replace 'p4::VARCHAR' with 'CAST(p4 AS TEXT)'
DEBUG: Found exact match at position 171
  Replacing 'p4::VARCHAR' with 'CAST(p4 AS TEXT)'
  Result after replacement: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
DEBUG find_type_end: after = 'TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1'
DEBUG: Type 'TEXT' followed by non-alphanumeric ' ', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Current result: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), p5::TEXT FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Looking to replace 'p5::TEXT' with 'CAST(p5 AS TEXT)'
DEBUG: Found exact match at position 189
  Replacing 'p5::TEXT' with 'CAST(p5 AS TEXT)'
  Result after replacement: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
DEBUG find_type_end: after = 'date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1'
DEBUG: Type 'DATE' followed by non-alphanumeric ',', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Current result: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, '2024-01-15'::date, '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Looking to replace ''2024-01-15'::date' with 'pg_date_from_text('2024-01-15')'
DEBUG: Found exact match at position 223
  Replacing ''2024-01-15'::date' with 'pg_date_from_text('2024-01-15')'
  Result after replacement: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
DEBUG find_type_end: after = 'time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1'
DEBUG: Type 'TIME' followed by non-alphanumeric ',', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Current result: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), '14:30:00'::time, 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Looking to replace ''14:30:00'::time' with 'pg_time_from_text('14:30:00')'
DEBUG: Found exact match at position 256
  Replacing ''14:30:00'::time' with 'pg_time_from_text('14:30:00')'
  Result after replacement: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
DEBUG find_type_end: after = 'date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1'
DEBUG: Type 'DATE' followed by non-alphanumeric ',', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Current result: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, 'completed', 'Express delivery requested', 0), (2, '2024-01-20'::date, '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Looking to replace ''2024-01-20'::date' with 'pg_date_from_text('2024-01-20')'
DEBUG: Found exact match at position 344
  Replacing ''2024-01-20'::date' with 'pg_date_from_text('2024-01-20')'
  Result after replacement: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, 'completed', 'Express delivery requested', 0), (2, pg_date_from_text('2024-01-20'), '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
DEBUG find_type_end: after = 'time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1'
DEBUG: Type 'TIME' followed by non-alphanumeric ',', returning 4
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, 'completed', 'Express delivery requested', 0), (2, pg_date_from_text('2024-01-20'), '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Current result: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, 'completed', 'Express delivery requested', 0), (2, pg_date_from_text('2024-01-20'), '10:15:00'::time, 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
  Looking to replace ''10:15:00'::time' with 'pg_time_from_text('10:15:00')'
DEBUG: Found exact match at position 377
  Replacing ''10:15:00'::time' with 'pg_time_from_text('10:15:00')'
  Result after replacement: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, 'completed', 'Express delivery requested', 0), (2, pg_date_from_text('2024-01-20'), pg_time_from_text('10:15:00'), 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
🎯 SQLAlchemy VALUES pattern detected, converting to UNION ALL
   Table: orders
   Columns: ["customer_id", "order_date", "order_time", "total_amount", "status", "notes"]
   Select clause: CAST(p0 AS INTEGER), pg_date_from_text(p1), pg_time_from_text(p2), p3(12, 2), CAST(p4 AS TEXT), CAST(p5 AS TEXT) FROM (VALUES (1, pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, 'completed', 'Express delivery requested', 0), (2, pg_date_from_text('2024-01-20'), pg_time_from_text('10:15:00'), 0.00, 'pending', 'Standard delivery', 1)) AS imp_sen(p0, p1, p2, p3, p4, p5, sen_counter) ORDER BY sen_counter RETURNING orders.id, orders.id AS id__1
   🔍 Type casts: [Some("INTEGER"), None, None, None, Some("TEXT"), Some("TEXT")]
   📦 Parsed 2 rows from VALUES clause
   Final SELECT: CAST(1 AS INTEGER), pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, CAST('completed' AS TEXT), CAST('Express delivery requested' AS TEXT) UNION ALL SELECT CAST(2 AS INTEGER), pg_date_from_text('2024-01-20'), pg_time_from_text('10:15:00'), 0.00, CAST('pending' AS TEXT), CAST('Standard delivery' AS TEXT) RETURNING orders.id, orders.id AS id__1
[2m2025-07-27T14:17:47.740838Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(1 AS INTEGER), pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, CAST('completed' AS TEXT), CAST('Express delivery requested' AS TEXT) UNION ALL SELECT CAST(2 AS INTEGER), pg_date_from_text('2024-01-20'), pg_time_from_text('10:15:00'), 0.00, CAST('pending' AS TEXT), CAST('Standard delivery' AS TEXT) RETURNING orders.id, orders.id AS id__1
[2m2025-07-27T14:17:47.740851Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query has RETURNING clause, using execute_dml_with_returning: INSERT INTO orders (customer_id, order_date, order_time, total_amount, status, notes) SELECT CAST(1 AS INTEGER), pg_date_from_text('2024-01-15'), pg_time_from_text('14:30:00'), 0.00, CAST('completed' AS TEXT), CAST('Express delivery requested' AS TEXT) UNION ALL SELECT CAST(2 AS INTEGER), pg_date_from_text('2024-01-20'), pg_time_from_text('10:15:00'), 0.00, CAST('pending' AS TEXT), CAST('Standard delivery' AS TEXT) RETURNING orders.id, orders.id AS id__1
[2m2025-07-27T14:17:47.743101Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: UPDATE orders SET total_amount=1349.98 WHERE orders.id = 1
[2m2025-07-27T14:17:47.743325Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: UPDATE orders SET total_amount=1349.98 WHERE orders.id = 1
[2m2025-07-27T14:17:47.743339Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query does NOT have RETURNING clause: UPDATE orders SET total_amount=1349.98 WHERE orders.id = 1
[2m2025-07-27T14:17:47.748378Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: UPDATE orders SET total_amount=99.98 WHERE orders.id = 2
[2m2025-07-27T14:17:47.748450Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: UPDATE orders SET total_amount=99.98 WHERE orders.id = 2
[2m2025-07-27T14:17:47.748460Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query does NOT have RETURNING clause: UPDATE orders SET total_amount=99.98 WHERE orders.id = 2
[2m2025-07-27T14:17:47.749488Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT p0::INTEGER, p1::INTEGER, p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
DEBUG find_type_end: after = 'INTEGER, p1::INTEGER, p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1'
DEBUG: Type 'INTEGER' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT p0::INTEGER, p1::INTEGER, p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
  Current result: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT p0::INTEGER, p1::INTEGER, p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
  Looking to replace 'p0::INTEGER' with 'CAST(p0 AS INTEGER)'
DEBUG: Found exact match at position 76
  Replacing 'p0::INTEGER' with 'CAST(p0 AS INTEGER)'
  Result after replacement: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(p0 AS INTEGER), p1::INTEGER, p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
DEBUG find_type_end: after = 'INTEGER, p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1'
DEBUG: Type 'INTEGER' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(p0 AS INTEGER), p1::INTEGER, p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
  Current result: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(p0 AS INTEGER), p1::INTEGER, p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
  Looking to replace 'p1::INTEGER' with 'CAST(p1 AS INTEGER)'
DEBUG: Found exact match at position 97
  Replacing 'p1::INTEGER' with 'CAST(p1 AS INTEGER)'
  Result after replacement: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(p0 AS INTEGER), CAST(p1 AS INTEGER), p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
DEBUG find_type_end: after = 'INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1'
DEBUG: Type 'INTEGER' followed by non-alphanumeric ',', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(p0 AS INTEGER), CAST(p1 AS INTEGER), p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
  Current result: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(p0 AS INTEGER), CAST(p1 AS INTEGER), p2::INTEGER, p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
  Looking to replace 'p2::INTEGER' with 'CAST(p2 AS INTEGER)'
DEBUG: Found exact match at position 118
  Replacing 'p2::INTEGER' with 'CAST(p2 AS INTEGER)'
  Result after replacement: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(p0 AS INTEGER), CAST(p1 AS INTEGER), CAST(p2 AS INTEGER), p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
DEBUG find_type_end: after = 'NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1'
DEBUG: Type 'NUMERIC' followed by non-alphanumeric '(', returning 7
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(p0 AS INTEGER), CAST(p1 AS INTEGER), CAST(p2 AS INTEGER), p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
  Current result: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(p0 AS INTEGER), CAST(p1 AS INTEGER), CAST(p2 AS INTEGER), p3::NUMERIC(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
  Looking to replace 'p3::NUMERIC' with 'p3'
DEBUG: Found exact match at position 139
  Replacing 'p3::NUMERIC' with 'p3'
  Result after replacement: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(p0 AS INTEGER), CAST(p1 AS INTEGER), CAST(p2 AS INTEGER), p3(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
🎯 SQLAlchemy VALUES pattern detected, converting to UNION ALL
   Table: order_items
   Columns: ["order_id", "product_id", "quantity", "unit_price"]
   Select clause: CAST(p0 AS INTEGER), CAST(p1 AS INTEGER), CAST(p2 AS INTEGER), p3(10, 2) FROM (VALUES (1, 1, 1, 1299.99, 0), (1, 2, 1, 49.99, 1), (2, 2, 2, 49.99, 2)) AS imp_sen(p0, p1, p2, p3, sen_counter) ORDER BY sen_counter RETURNING order_items.id, order_items.id AS id__1
   🔍 Type casts: [Some("INTEGER"), Some("INTEGER"), Some("INTEGER"), None]
   📦 Parsed 3 rows from VALUES clause
   Final SELECT: CAST(1 AS INTEGER), CAST(1 AS INTEGER), CAST(1 AS INTEGER), 1299.99 UNION ALL SELECT CAST(1 AS INTEGER), CAST(2 AS INTEGER), CAST(1 AS INTEGER), 49.99 UNION ALL SELECT CAST(2 AS INTEGER), CAST(2 AS INTEGER), CAST(2 AS INTEGER), 49.99 RETURNING order_items.id, order_items.id AS id__1
[2m2025-07-27T14:17:47.751273Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(1 AS INTEGER), CAST(1 AS INTEGER), CAST(1 AS INTEGER), 1299.99 UNION ALL SELECT CAST(1 AS INTEGER), CAST(2 AS INTEGER), CAST(1 AS INTEGER), 49.99 UNION ALL SELECT CAST(2 AS INTEGER), CAST(2 AS INTEGER), CAST(2 AS INTEGER), 49.99 RETURNING order_items.id, order_items.id AS id__1
[2m2025-07-27T14:17:47.751285Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query has RETURNING clause, using execute_dml_with_returning: INSERT INTO order_items (order_id, product_id, quantity, unit_price) SELECT CAST(1 AS INTEGER), CAST(1 AS INTEGER), CAST(1 AS INTEGER), 1299.99 UNION ALL SELECT CAST(1 AS INTEGER), CAST(2 AS INTEGER), CAST(1 AS INTEGER), 49.99 UNION ALL SELECT CAST(2 AS INTEGER), CAST(2 AS INTEGER), CAST(2 AS INTEGER), 49.99 RETURNING order_items.id, order_items.id AS id__1
[2m2025-07-27T14:17:47.751953Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: COMMIT
[2m2025-07-27T14:17:47.751984Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing COMMIT command
[2m2025-07-27T14:17:47.752102Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m COMMIT executed successfully
[2m2025-07-27T14:17:47.752109Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint check: session_count=1
[2m2025-07-27T14:17:47.752114Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully acquired connection for WAL checkpoint
[2m2025-07-27T14:17:47.752125Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint(RESTART) executed - forced complete flush
[2m2025-07-27T14:17:47.752138Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to Idle
[2m2025-07-27T14:17:47.755236Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:47.755273Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:47.755295Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:47.755304Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:47.755402Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT count(*) AS count_1 
FROM (SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date 
FROM users) AS anon_1
[2m2025-07-27T14:17:47.774089Z[0m [32m INFO[0m [2mpgsqlite::translator::arithmetic_analyzer[0m[2m:[0m Detected arithmetic on columns ["count"] aliased as 'count_1', using 'count' as source
[2m2025-07-27T14:17:47.796685Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT count(*) AS count_1 
FROM (SELECT posts.id AS posts_id, posts.title AS posts_title, posts.content AS posts_content, posts.author_id AS posts_author_id, posts.category_id AS posts_category_id, posts.created_at AS posts_created_at, posts.updated_at AS posts_updated_at, posts.view_count AS posts_view_count, posts.is_published AS posts_is_published 
FROM posts) AS anon_1
[2m2025-07-27T14:17:47.796931Z[0m [32m INFO[0m [2mpgsqlite::translator::arithmetic_analyzer[0m[2m:[0m Detected arithmetic on columns ["count"] aliased as 'count_1', using 'count' as source
[2m2025-07-27T14:17:47.817516Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT count(*) AS count_1 
FROM (SELECT products.id AS products_id, products.name AS products_name, products.description AS products_description, products.price AS products_price, products.stock_quantity AS products_stock_quantity, products.is_available AS products_is_available, products.created_at AS products_created_at 
FROM products) AS anon_1
[2m2025-07-27T14:17:47.817824Z[0m [32m INFO[0m [2mpgsqlite::translator::arithmetic_analyzer[0m[2m:[0m Detected arithmetic on columns ["count"] aliased as 'count_1', using 'count' as source
[2m2025-07-27T14:17:47.840960Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date 
FROM users 
WHERE users.is_active = true
[2m2025-07-27T14:17:47.855874Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date 
FROM users 
WHERE users.username = 'alice_dev' 
 LIMIT 1
[2m2025-07-27T14:17:47.870436Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: UPDATE users SET full_name='Alice Johnson-Dev' WHERE users.id = 1
[2m2025-07-27T14:17:47.870553Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: UPDATE users SET full_name='Alice Johnson-Dev' WHERE users.id = 1
[2m2025-07-27T14:17:47.870563Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query does NOT have RETURNING clause: UPDATE users SET full_name='Alice Johnson-Dev' WHERE users.id = 1
[2m2025-07-27T14:17:47.871087Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: COMMIT
[2m2025-07-27T14:17:47.871120Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing COMMIT command
[2m2025-07-27T14:17:47.871172Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m COMMIT executed successfully
[2m2025-07-27T14:17:47.871180Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint check: session_count=1
[2m2025-07-27T14:17:47.871185Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully acquired connection for WAL checkpoint
[2m2025-07-27T14:17:47.871196Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint(RESTART) executed - forced complete flush
[2m2025-07-27T14:17:47.871210Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to Idle
[2m2025-07-27T14:17:47.872202Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:47.872232Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:47.872251Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:47.872257Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:47.872334Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT posts.id AS posts_id, posts.title AS posts_title, posts.content AS posts_content, posts.author_id AS posts_author_id, posts.category_id AS posts_category_id, posts.created_at AS posts_created_at, posts.updated_at AS posts_updated_at, posts.view_count AS posts_view_count, posts.is_published AS posts_is_published 
FROM posts JOIN categories ON categories.id = posts.category_id 
WHERE categories.name = 'Technology' OR posts.view_count > 200
[2m2025-07-27T14:17:47.883127Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_id' -> table 'posts'
[2m2025-07-27T14:17:47.883145Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_id' for posts.id
[2m2025-07-27T14:17:47.883174Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_title' -> table 'posts'
[2m2025-07-27T14:17:47.883182Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_title' for posts.title
[2m2025-07-27T14:17:47.883201Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_content' -> table 'posts'
[2m2025-07-27T14:17:47.883207Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_content' for posts.content
[2m2025-07-27T14:17:47.883233Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_author_id' -> table 'posts'
[2m2025-07-27T14:17:47.883240Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_author_id' for posts.author_id
[2m2025-07-27T14:17:47.883260Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_category_id' -> table 'posts'
[2m2025-07-27T14:17:47.883270Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_category_id' for posts.category_id
[2m2025-07-27T14:17:47.883290Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_created_at' -> table 'posts'
[2m2025-07-27T14:17:47.883296Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_created_at' for posts.created_at
[2m2025-07-27T14:17:47.883312Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_updated_at' -> table 'posts'
[2m2025-07-27T14:17:47.883317Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_updated_at' for posts.updated_at
[2m2025-07-27T14:17:47.883340Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_view_count' -> table 'posts'
[2m2025-07-27T14:17:47.883346Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_view_count' for posts.view_count
[2m2025-07-27T14:17:47.883371Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_is_published' -> table 'posts'
[2m2025-07-27T14:17:47.883377Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_is_published' for posts.is_published
[2m2025-07-27T14:17:47.883428Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 30 mappings from query
[2m2025-07-27T14:17:47.896202Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date 
FROM users 
WHERE users.username LIKE '%dev%'
[2m2025-07-27T14:17:47.911407Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:47.911911Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:47.911941Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:47.911959Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:47.911967Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:47.912042Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date 
FROM users 
WHERE users.username = 'alice_dev' 
 LIMIT 1
[2m2025-07-27T14:17:47.913462Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT posts.id AS posts_id, posts.title AS posts_title, posts.content AS posts_content, posts.author_id AS posts_author_id, posts.category_id AS posts_category_id, posts.created_at AS posts_created_at, posts.updated_at AS posts_updated_at, posts.view_count AS posts_view_count, posts.is_published AS posts_is_published 
FROM posts 
WHERE 1 = posts.author_id
[2m2025-07-27T14:17:47.927811Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT orders.id AS orders_id, orders.customer_id AS orders_customer_id, orders.order_date AS orders_order_date, orders.order_time AS orders_order_time, orders.total_amount AS orders_total_amount, orders.status AS orders_status, orders.notes AS orders_notes 
FROM orders 
WHERE 1 = orders.customer_id
[2m2025-07-27T14:17:47.957307Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT posts.id AS posts_id, posts.title AS posts_title, posts.content AS posts_content, posts.author_id AS posts_author_id, posts.category_id AS posts_category_id, posts.created_at AS posts_created_at, posts.updated_at AS posts_updated_at, posts.view_count AS posts_view_count, posts.is_published AS posts_is_published, users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date, categories.id AS categories_id, categories.name AS categories_name, categories.description AS categories_description, categories.created_at AS categories_created_at 
FROM posts JOIN users ON posts.author_id = users.id JOIN categories ON posts.category_id = categories.id
[2m2025-07-27T14:17:47.968889Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_id' -> table 'posts'
[2m2025-07-27T14:17:47.968914Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_id' for posts.id
[2m2025-07-27T14:17:47.968943Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_title' -> table 'posts'
[2m2025-07-27T14:17:47.968949Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_title' for posts.title
[2m2025-07-27T14:17:47.968967Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_content' -> table 'posts'
[2m2025-07-27T14:17:47.968973Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_content' for posts.content
[2m2025-07-27T14:17:47.968998Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_author_id' -> table 'posts'
[2m2025-07-27T14:17:47.969005Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_author_id' for posts.author_id
[2m2025-07-27T14:17:47.969025Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_category_id' -> table 'posts'
[2m2025-07-27T14:17:47.969035Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_category_id' for posts.category_id
[2m2025-07-27T14:17:47.969054Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_created_at' -> table 'posts'
[2m2025-07-27T14:17:47.969061Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_created_at' for posts.created_at
[2m2025-07-27T14:17:47.969076Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_updated_at' -> table 'posts'
[2m2025-07-27T14:17:47.969083Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_updated_at' for posts.updated_at
[2m2025-07-27T14:17:47.969098Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_view_count' -> table 'posts'
[2m2025-07-27T14:17:47.969104Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_view_count' for posts.view_count
[2m2025-07-27T14:17:47.969126Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'posts_is_published' -> table 'posts'
[2m2025-07-27T14:17:47.969132Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'posts_is_published' for posts.is_published
[2m2025-07-27T14:17:47.969157Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'users_id' -> table 'users'
[2m2025-07-27T14:17:47.969169Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'users_id' for users.id
[2m2025-07-27T14:17:47.969185Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'users_username' -> table 'users'
[2m2025-07-27T14:17:47.969190Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'users_username' for users.username
[2m2025-07-27T14:17:47.969204Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'users_email' -> table 'users'
[2m2025-07-27T14:17:47.969209Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'users_email' for users.email
[2m2025-07-27T14:17:47.969232Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'users_full_name' -> table 'users'
[2m2025-07-27T14:17:47.969239Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'users_full_name' for users.full_name
[2m2025-07-27T14:17:47.969254Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'users_is_active' -> table 'users'
[2m2025-07-27T14:17:47.969259Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'users_is_active' for users.is_active
[2m2025-07-27T14:17:47.969274Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'users_created_at' -> table 'users'
[2m2025-07-27T14:17:47.969280Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'users_created_at' for users.created_at
[2m2025-07-27T14:17:47.969295Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'users_birth_date' -> table 'users'
[2m2025-07-27T14:17:47.969300Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'users_birth_date' for users.birth_date
[2m2025-07-27T14:17:47.969321Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'categories_id' -> table 'categories'
[2m2025-07-27T14:17:47.969327Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'categories_id' for categories.id
[2m2025-07-27T14:17:47.969343Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'categories_name' -> table 'categories'
[2m2025-07-27T14:17:47.969349Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'categories_name' for categories.name
[2m2025-07-27T14:17:47.969367Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'categories_description' -> table 'categories'
[2m2025-07-27T14:17:47.969373Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'categories_description' for categories.description
[2m2025-07-27T14:17:47.969394Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'categories_created_at' -> table 'categories'
[2m2025-07-27T14:17:47.969400Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'categories_created_at' for categories.created_at
[2m2025-07-27T14:17:47.969449Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 56 mappings from query
[2m2025-07-27T14:17:47.983835Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.username AS users_username, count(posts.id) AS post_count, avg(posts.view_count) AS avg_views 
FROM users JOIN posts ON users.id = posts.author_id GROUP BY users.username
[2m2025-07-27T14:17:47.994501Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'users_username' -> table 'users'
[2m2025-07-27T14:17:47.994518Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'users_username' for users.username
[2m2025-07-27T14:17:47.994586Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 10 mappings from query
[2m2025-07-27T14:17:48.018230Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT orders.id AS orders_id, users.username AS users_username, products.name AS products_name, order_items.quantity AS order_items_quantity, order_items.unit_price AS order_items_unit_price, order_items.quantity * order_items.unit_price AS item_total 
FROM orders JOIN users ON orders.customer_id = users.id JOIN order_items ON orders.id = order_items.order_id JOIN products ON order_items.product_id = products.id
[2m2025-07-27T14:17:48.025137Z[0m [32m INFO[0m [2mpgsqlite::translator::arithmetic_analyzer[0m[2m:[0m Detected arithmetic on columns ["order_items.quantity", "order_items.unit_price"] aliased as 'item_total', using 'order_items.quantity' as source
[2m2025-07-27T14:17:48.037052Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'orders_id' -> table 'orders'
[2m2025-07-27T14:17:48.037071Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'orders_id' for orders.id
[2m2025-07-27T14:17:48.037112Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'users_username' -> table 'users'
[2m2025-07-27T14:17:48.037119Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'users_username' for users.username
[2m2025-07-27T14:17:48.037143Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'products_name' -> table 'products'
[2m2025-07-27T14:17:48.037150Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'products_name' for products.name
[2m2025-07-27T14:17:48.037360Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'order_items_quantity' -> table 'order_items'
[2m2025-07-27T14:17:48.037367Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'order_items_quantity' for order_items.quantity
[2m2025-07-27T14:17:48.037390Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'order_items_unit_price' -> table 'order_items'
[2m2025-07-27T14:17:48.037400Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'order_items_unit_price' for order_items.unit_price
[2m2025-07-27T14:17:48.037432Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'item_total' -> table 'order_items'
[2m2025-07-27T14:17:48.037487Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 24 mappings from query
[2m2025-07-27T14:17:48.057152Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:48.058959Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:48.059001Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:48.059028Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:48.059037Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:48.059129Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT posts.id AS posts_id, posts.title AS posts_title, posts.content AS posts_content, posts.author_id AS posts_author_id, posts.category_id AS posts_category_id, posts.created_at AS posts_created_at, posts.updated_at AS posts_updated_at, posts.view_count AS posts_view_count, posts.is_published AS posts_is_published 
FROM posts 
WHERE posts.view_count > (SELECT avg(posts.view_count) AS avg_1 
FROM posts 
WHERE posts.is_published = true)
[2m2025-07-27T14:17:48.073653Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT posts.title AS posts_title, posts.view_count AS posts_view_count, rank() OVER (ORDER BY posts.view_count DESC) AS rank 
FROM posts 
WHERE posts.is_published = true
[2m2025-07-27T14:17:48.092014Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.username AS users_username, CASE WHEN (users.is_active = true) THEN 'Active' ELSE 'Inactive' END AS status 
FROM users
[2m2025-07-27T14:17:48.113282Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT count(*) AS count_1 
FROM (SELECT posts.id AS posts_id, posts.title AS posts_title, posts.content AS posts_content, posts.author_id AS posts_author_id, posts.category_id AS posts_category_id, posts.created_at AS posts_created_at, posts.updated_at AS posts_updated_at, posts.view_count AS posts_view_count, posts.is_published AS posts_is_published 
FROM posts 
WHERE posts.created_at >= date('now', '-30 days')) AS anon_1
[2m2025-07-27T14:17:48.120466Z[0m [32m INFO[0m [2mpgsqlite::translator::arithmetic_analyzer[0m[2m:[0m Detected arithmetic on columns ["count"] aliased as 'count_1', using 'count' as source
[2m2025-07-27T14:17:48.141271Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT categories.name AS categories_name, count(posts.id) AS post_count 
FROM categories JOIN posts ON categories.id = posts.category_id GROUP BY categories.name 
HAVING count(posts.id) > 1
[2m2025-07-27T14:17:48.151902Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: alias 'categories_name' -> table 'categories'
[2m2025-07-27T14:17:48.151920Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: SQLAlchemy pattern detected 'categories_name' for categories.name
[2m2025-07-27T14:17:48.151985Z[0m [32m INFO[0m [2mpgsqlite::query::join_type_inference[0m[2m:[0m JOIN mapping: Built 8 mappings from query
[2m2025-07-27T14:17:48.169050Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:48.169610Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:48.169647Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:48.169667Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:48.169674Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:48.169751Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date 
FROM users 
WHERE users.username = 'transaction_test_user' 
 LIMIT 1
[2m2025-07-27T14:17:48.184364Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) VALUES ('transaction_test_user', 'test@transaction.com', 'Original Name', true, '2025-07-27T14:17:48.184212'::timestamp, NULL) RETURNING users.id
DEBUG find_type_end: after = 'timestamp, NULL) RETURNING users.id'
DEBUG: Type 'TIMESTAMP' followed by non-alphanumeric ',', returning 9
DEBUG CastTranslator: Processing query with RETURNING
  Original: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) VALUES ('transaction_test_user', 'test@transaction.com', 'Original Name', true, '2025-07-27T14:17:48.184212'::timestamp, NULL) RETURNING users.id
  Current result: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) VALUES ('transaction_test_user', 'test@transaction.com', 'Original Name', true, '2025-07-27T14:17:48.184212'::timestamp, NULL) RETURNING users.id
  Looking to replace ''2025-07-27T14:17:48.184212'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:48.184212')'
DEBUG: Found exact match at position 162
  Replacing ''2025-07-27T14:17:48.184212'::timestamp' with 'pg_timestamp_from_text('2025-07-27T14:17:48.184212')'
  Result after replacement: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) VALUES ('transaction_test_user', 'test@transaction.com', 'Original Name', true, pg_timestamp_from_text('2025-07-27T14:17:48.184212'), NULL) RETURNING users.id
[2m2025-07-27T14:17:48.187391Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) VALUES ('transaction_test_user', 'test@transaction.com', 'Original Name', true, pg_timestamp_from_text('2025-07-27T14:17:48.184212'), NULL) RETURNING users.id
[2m2025-07-27T14:17:48.187409Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query has RETURNING clause, using execute_dml_with_returning: INSERT INTO users (username, email, full_name, is_active, created_at, birth_date) VALUES ('transaction_test_user', 'test@transaction.com', 'Original Name', true, pg_timestamp_from_text('2025-07-27T14:17:48.184212'), NULL) RETURNING users.id
[2m2025-07-27T14:17:48.188174Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: COMMIT
[2m2025-07-27T14:17:48.188207Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing COMMIT command
[2m2025-07-27T14:17:48.188275Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m COMMIT executed successfully
[2m2025-07-27T14:17:48.188282Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint check: session_count=1
[2m2025-07-27T14:17:48.188286Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully acquired connection for WAL checkpoint
[2m2025-07-27T14:17:48.188298Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint(RESTART) executed - forced complete flush
[2m2025-07-27T14:17:48.188310Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to Idle
[2m2025-07-27T14:17:48.189031Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:48.189062Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:48.189079Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:48.189086Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:48.189162Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date 
FROM users 
WHERE users.id = 4
[2m2025-07-27T14:17:48.203156Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:48.203640Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:48.203670Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:48.203688Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:48.203695Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:48.203768Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date 
FROM users 
WHERE users.username = 'transaction_test_user' 
 LIMIT 1
[2m2025-07-27T14:17:48.204654Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: UPDATE users SET full_name='Updated Name' WHERE users.id = 4
[2m2025-07-27T14:17:48.204740Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m execute_dml called with query: UPDATE users SET full_name='Updated Name' WHERE users.id = 4
[2m2025-07-27T14:17:48.204756Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Query does NOT have RETURNING clause: UPDATE users SET full_name='Updated Name' WHERE users.id = 4
[2m2025-07-27T14:17:48.205212Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: COMMIT
[2m2025-07-27T14:17:48.205244Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing COMMIT command
[2m2025-07-27T14:17:48.205286Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m COMMIT executed successfully
[2m2025-07-27T14:17:48.205295Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint check: session_count=1
[2m2025-07-27T14:17:48.205301Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Successfully acquired connection for WAL checkpoint
[2m2025-07-27T14:17:48.205311Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m WAL checkpoint(RESTART) executed - forced complete flush
[2m2025-07-27T14:17:48.205324Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to Idle
[2m2025-07-27T14:17:48.205733Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:48.205765Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:48.205784Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:48.205792Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:48.205871Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date 
FROM users 
WHERE users.id = 4
[2m2025-07-27T14:17:48.206803Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.id, users.username, users.email, users.full_name, users.is_active, users.created_at, users.birth_date 
FROM users 
WHERE users.id = 4
[2m2025-07-27T14:17:48.214481Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:48.214943Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:48.214976Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:48.214995Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:48.215003Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:48.215081Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.full_name AS users_full_name, users.is_active AS users_is_active, users.created_at AS users_created_at, users.birth_date AS users_birth_date 
FROM users 
WHERE users.username = 'transaction_test_user' 
 LIMIT 1
[2m2025-07-27T14:17:48.215622Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:48.216427Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: BEGIN
[2m2025-07-27T14:17:48.216457Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Executing BEGIN command
[2m2025-07-27T14:17:48.216477Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m BEGIN executed successfully
[2m2025-07-27T14:17:48.216485Z[0m [32m INFO[0m [2mpgsqlite::query::executor[0m[2m:[0m Transaction status updated to InTransaction
[2m2025-07-27T14:17:48.216560Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT sum(order_items.quantity * order_items.unit_price) AS sum_1 
FROM order_items
[2m2025-07-27T14:17:48.218351Z[0m [32m INFO[0m [2mpgsqlite::translator::arithmetic_analyzer[0m[2m:[0m Detected arithmetic on columns ["sum", "order_items.quantity", "order_items.unit_price"] aliased as 'sum_1', using 'sum' as source
[2m2025-07-27T14:17:48.233148Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT products.id AS products_id, products.name AS products_name, products.description AS products_description, products.price AS products_price, products.stock_quantity AS products_stock_quantity, products.is_available AS products_is_available, products.created_at AS products_created_at 
FROM products 
WHERE products.price > 100.00
[2m2025-07-27T14:17:48.249387Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: SELECT products.name AS products_name, products.price AS products_price, products.price * 0.9 AS discounted_price 
FROM products
[2m2025-07-27T14:17:48.250420Z[0m [32m INFO[0m [2mpgsqlite::translator::arithmetic_analyzer[0m[2m:[0m Detected arithmetic on columns ["products.price"] aliased as 'discounted_price', using 'products.price' as source
[2m2025-07-27T14:17:48.272500Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Received query from 127.0.0.1:56598: ROLLBACK
[2m2025-07-27T14:17:48.272707Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Client 127.0.0.1:56598 requested termination
[2m2025-07-27T14:17:48.272728Z[0m [32m INFO[0m [2mpgsqlite[0m[2m:[0m Connection from 127.0.0.1:56598 closed
