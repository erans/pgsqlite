# Generated by Django 5.2.6 on 2025-09-25 22:13

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('bio', models.TextField(blank=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('nationality', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('founded_year', models.IntegerField(blank=True, null=True)),
                ('headquarters', models.CharField(blank=True, max_length=200)),
                ('website', models.URLField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('parent_genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='books.genre')),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('subtitle', models.CharField(blank=True, max_length=300)),
                ('isbn', models.CharField(max_length=13, unique=True)),
                ('isbn10', models.CharField(blank=True, max_length=10, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('summary', models.CharField(blank=True, max_length=1000)),
                ('excerpt', models.TextField(blank=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('pages', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('weight_grams', models.FloatField(blank=True, null=True)),
                ('rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('5.00'))])),
                ('publication_date', models.DateField()),
                ('first_published', models.DateField(blank=True, null=True)),
                ('last_reprint', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_available', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_bestseller', models.BooleanField(default=False)),
                ('has_ebook', models.BooleanField(default=False)),
                ('has_audiobook', models.BooleanField(default=False)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=20)),
                ('languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), blank=True, default=list, size=5)),
                ('formats', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), blank=True, default=list, size=10)),
                ('awards', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('chapter_page_counts', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, size=None)),
                ('review_scores', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=1, max_digits=3), blank=True, default=list, size=None)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('reviews_data', models.JSONField(blank=True, default=dict)),
                ('sales_data', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('review', 'Under Review'), ('published', 'Published'), ('out_of_print', 'Out of Print'), ('discontinued', 'Discontinued')], default='draft', max_length=20)),
                ('condition', models.CharField(choices=[('new', 'New'), ('like_new', 'Like New'), ('good', 'Good'), ('acceptable', 'Acceptable'), ('damaged', 'Damaged')], default='new', max_length=20)),
                ('co_authors', models.ManyToManyField(blank=True, related_name='co_authored_books', to='books.author')),
                ('primary_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_books', to='books.author')),
                ('genres', models.ManyToManyField(blank=True, to='books.genre')),
                ('publisher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='books.publisher')),
            ],
            options={
                'ordering': ['-created_at', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reviewer_name', models.CharField(max_length=200)),
                ('reviewer_email', models.EmailField(max_length=254)),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=300)),
                ('content', models.TextField()),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('helpful_votes', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='books.book')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BookInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_in_stock', models.IntegerField(default=0)),
                ('quantity_reserved', models.IntegerField(default=0)),
                ('quantity_sold', models.BigIntegerField(default=0)),
                ('reorder_level', models.IntegerField(default=10)),
                ('max_stock_level', models.IntegerField(default=1000)),
                ('cost_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('last_restocked', models.DateTimeField(blank=True, null=True)),
                ('warehouse_locations', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('supply_chain_data', models.JSONField(blank=True, default=dict)),
                ('book', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='books.book')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('quantity_in_stock__gte', 0)), name='inventory_stock_non_negative'), models.CheckConstraint(condition=models.Q(('quantity_reserved__gte', 0)), name='inventory_reserved_non_negative'), models.CheckConstraint(condition=models.Q(('reorder_level__gte', 0)), name='inventory_reorder_non_negative')],
            },
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['title'], name='books_book_title_d3218d_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['isbn'], name='books_book_isbn_54becd_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['publication_date'], name='books_book_publica_4f381a_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['price'], name='books_book_price_9cc12f_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['is_available', 'status'], name='books_book_is_avai_82af5a_idx'),
        ),
        migrations.AddConstraint(
            model_name='book',
            constraint=models.CheckConstraint(condition=models.Q(('price__gte', 0)), name='books_price_positive'),
        ),
        migrations.AddConstraint(
            model_name='book',
            constraint=models.CheckConstraint(condition=models.Q(('pages__gte', 1)), name='books_pages_positive'),
        ),
        migrations.AddConstraint(
            model_name='book',
            constraint=models.UniqueConstraint(fields=('isbn',), name='books_unique_isbn'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['book', 'rating'], name='books_revie_book_id_691b70_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_verified_purchase'], name='books_revie_is_veri_d35ded_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='books_revie_created_1f9fbe_idx'),
        ),
    ]
