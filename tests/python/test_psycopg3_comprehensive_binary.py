#!/usr/bin/env python3
"""
Comprehensive test for psycopg3 binary protocol with all supported types.
"""

import psycopg
import json
from decimal import Decimal
import uuid

def test_comprehensive_binary():
    """Test all binary types together in comprehensive scenarios."""
    # Connect to pgsqlite
    conn = psycopg.connect("host=localhost port=15500 user=postgres dbname=main")
    
    try:
        with conn.cursor() as cur:
            # Create comprehensive test table with all binary-supported types
            cur.execute("""
                CREATE TABLE IF NOT EXISTS comprehensive_test (
                    id INTEGER PRIMARY KEY,
                    -- Core types
                    bool_val BOOLEAN,
                    int2_val SMALLINT,
                    int4_val INTEGER,
                    int8_val BIGINT,
                    float4_val REAL,
                    float8_val DOUBLE PRECISION,
                    text_val TEXT,
                    varchar_val VARCHAR(100),
                    bytea_val BYTEA,
                    
                    -- Advanced types
                    numeric_val NUMERIC(10, 2),
                    uuid_val UUID,
                    json_val JSON,
                    jsonb_val JSONB,
                    money_val MONEY,
                    
                    -- Date/Time types
                    date_val DATE,
                    time_val TIME,
                    timestamp_val TIMESTAMP,
                    timestamptz_val TIMESTAMPTZ,
                    interval_val INTERVAL,
                    
                    -- Array types
                    int_array INTEGER[],
                    text_array TEXT[],
                    bool_array BOOLEAN[],
                    float_array DOUBLE PRECISION[],
                    
                    -- Range types
                    int4_range INT4RANGE,
                    int8_range INT8RANGE,
                    num_range NUMRANGE,
                    
                    -- Network types
                    cidr_val CIDR,
                    inet_val INET,
                    mac_val MACADDR,
                    mac8_val MACADDR8
                )
            """)
            conn.commit()
            
            # Comprehensive test data covering edge cases
            test_cases = [
                {
                    "id": 1,
                    "name": "Standard values",
                    "data": {
                        "bool_val": True,
                        "int2_val": 12345,
                        "int4_val": 1234567890,
                        "int8_val": 9223372036854775807,  # Max int64
                        "float4_val": 3.14159,
                        "float8_val": 2.718281828459045,
                        "text_val": "Hello, Binary Protocol!",
                        "varchar_val": "Variable length string",
                        "bytea_val": b'\x01\x02\x03\x04\x05',
                        "numeric_val": Decimal("12345.67"),
                        "uuid_val": str(uuid.uuid4()),
                        "json_val": '{"name": "test", "value": 42}',
                        "jsonb_val": '{"binary": true, "nested": {"key": "value"}}',
                        "money_val": "$1234.56",
                        "date_val": "2024-01-15",
                        "time_val": "14:30:45.123456",
                        "timestamp_val": "2024-01-15 14:30:45.123456",
                        "timestamptz_val": "2024-01-15 14:30:45.123456+00",
                        "interval_val": "1 day 2:30:00",
                        "int_array": json.dumps([1, 2, 3, 4, 5]),
                        "text_array": json.dumps(["hello", "world", "binary"]),
                        "bool_array": json.dumps([True, False, True]),
                        "float_array": json.dumps([1.1, 2.2, 3.3]),
                        "int4_range": "[1,100)",
                        "int8_range": "[1000000000000,2000000000000]",
                        "num_range": "[1.5,99.99]",
                        "cidr_val": "192.168.1.0/24",
                        "inet_val": "192.168.1.1",
                        "mac_val": "08:00:2b:01:02:03",
                        "mac8_val": "08:00:2b:01:02:03:04:05"
                    }
                },
                {
                    "id": 2,
                    "name": "Edge cases and extremes",
                    "data": {
                        "bool_val": False,
                        "int2_val": -32768,  # Min int16
                        "int4_val": -2147483648,  # Min int32
                        "int8_val": -9223372036854775808,  # Min int64
                        "float4_val": -0.0,
                        "float8_val": float('inf'),
                        "text_val": "",  # Empty string
                        "varchar_val": "üöÄüåüüíª",  # Unicode characters
                        "bytea_val": b'',  # Empty bytea
                        "numeric_val": Decimal("0.00"),
                        "uuid_val": "00000000-0000-0000-0000-000000000000",
                        "json_val": '[]',
                        "jsonb_val": '{}',
                        "money_val": "$0.00",
                        "date_val": "2000-01-01",  # PostgreSQL epoch
                        "time_val": "00:00:00",
                        "timestamp_val": "2000-01-01 00:00:00",
                        "timestamptz_val": "2000-01-01 00:00:00+00",
                        "interval_val": "0 seconds",
                        "int_array": json.dumps([]),  # Empty array
                        "text_array": json.dumps(["", "single"]),
                        "bool_array": json.dumps([False]),
                        "float_array": json.dumps([0.0, -1.0]),
                        "int4_range": "empty",
                        "int8_range": "(,)",  # Infinite range
                        "num_range": "[-999.99,999.99)",
                        "cidr_val": "10.0.0.0/8",
                        "inet_val": "::1",  # IPv6 loopback
                        "mac_val": "00:00:00:00:00:00",
                        "mac8_val": "ff:ff:ff:ff:ff:ff:ff:ff"
                    }
                },
                {
                    "id": 3,
                    "name": "NULL values mixed with data",
                    "data": {
                        "bool_val": None,
                        "int2_val": 42,
                        "int4_val": None,
                        "int8_val": 123456789,
                        "float4_val": None,
                        "float8_val": 3.14,
                        "text_val": None,
                        "varchar_val": "Not null",
                        "bytea_val": None,
                        "numeric_val": None,
                        "uuid_val": None,
                        "json_val": None,
                        "jsonb_val": '{"has_nulls": null}',
                        "money_val": None,
                        "date_val": None,
                        "time_val": "12:00:00",
                        "timestamp_val": None,
                        "timestamptz_val": None,
                        "interval_val": None,
                        "int_array": json.dumps([1, None, 3]),  # Array with NULLs
                        "text_array": None,
                        "bool_array": json.dumps([True, None, False]),
                        "float_array": None,
                        "int4_range": None,
                        "int8_range": "[42,42]",  # Single point range
                        "num_range": None,
                        "cidr_val": None,
                        "inet_val": "2001:db8::1",
                        "mac_val": None,
                        "mac8_val": "12:34:56:ff:fe:78:9a:bc"  # 6-byte converted to 8-byte
                    }
                }
            ]
            
            # Insert all test cases using binary format
            for case in test_cases:
                print(f"\nüìù Testing: {case['name']}")
                
                # Build dynamic INSERT query
                columns = list(case['data'].keys()) + ['id']
                values = list(case['data'].values()) + [case['id']]
                
                placeholders = ', '.join(['%s'] * len(columns))
                column_names = ', '.join(columns)
                
                cur.execute(
                    f"INSERT INTO comprehensive_test ({column_names}) VALUES ({placeholders})",
                    values,
                    binary=True  # Use binary format
                )
                conn.commit()
                print(f"  ‚úÖ Inserted {len(case['data'])} fields using binary protocol")
            
            # Query all data back using binary format
            cur.execute("SELECT * FROM comprehensive_test ORDER BY id", binary=True)
            rows = cur.fetchall()
            
            print(f"\nüîç Retrieved {len(rows)} rows using binary protocol")
            
            # Verify data integrity for each test case
            for i, (case, row) in enumerate(zip(test_cases, rows)):
                print(f"\n‚úÖ Verifying: {case['name']}")
                
                # Check ID
                assert row[0] == case['id'], f"ID mismatch: expected {case['id']}, got {row[0]}"
                
                # Sample a few key fields for verification
                non_null_fields = {k: v for k, v in case['data'].items() if v is not None}
                print(f"  üìä Non-NULL fields: {len(non_null_fields)}/{len(case['data'])}")
                
                # Verify specific types work correctly
                if case['data'].get('numeric_val') is not None:
                    # Numeric values should be preserved precisely
                    print(f"  üí∞ Numeric: {row[10]} (type: {type(row[10])})")
                
                if case['data'].get('uuid_val') is not None:
                    # UUIDs should be preserved exactly
                    print(f"  üÜî UUID: {row[11]}")
                
                if case['data'].get('json_val') is not None:
                    # JSON should be parseable
                    parsed_json = json.loads(row[12]) if row[12] else None
                    print(f"  üìÑ JSON: {parsed_json}")
                
                if case['data'].get('int_array') is not None:
                    # Arrays should maintain structure
                    print(f"  üìã Array: {row[20]}")
                
                if case['data'].get('int4_range') is not None:
                    # Ranges should maintain bounds
                    print(f"  üìè Range: {row[24]}")
                
                if case['data'].get('cidr_val') is not None:
                    # Network types should maintain precision
                    print(f"  üåê Network: {row[27]}")
            
            # Test complex queries with binary parameters
            print("\nüîß Testing complex queries with binary parameters...")
            
            # Test JOINs with binary results
            cur.execute("""
                SELECT t1.id, t1.text_val, t1.numeric_val, t1.uuid_val
                FROM comprehensive_test t1
                WHERE t1.bool_val = %s OR t1.int4_val > %s
                ORDER BY t1.id
            """, [True, 1000000], binary=True)
            
            join_results = cur.fetchall()
            print(f"  ‚úÖ Complex WHERE query returned {len(join_results)} rows")
            
            # Test aggregations with binary results
            cur.execute("""
                SELECT 
                    COUNT(*) as total_rows,
                    COUNT(numeric_val) as non_null_numeric,
                    MAX(int8_val) as max_bigint,
                    MIN(date_val) as min_date
                FROM comprehensive_test
            """, binary=True)
            
            agg_result = cur.fetchone()
            print(f"  ‚úÖ Aggregation query: {agg_result[0]} total, {agg_result[1]} non-null numeric")
            
            # Test array operations with binary
            cur.execute("""
                SELECT id, int_array
                FROM comprehensive_test 
                WHERE int_array IS NOT NULL
            """, binary=True)
            
            array_results = cur.fetchall()
            print(f"  ‚úÖ Array query returned {len(array_results)} rows with arrays")
            
            # Test network operations with binary
            cur.execute("""
                SELECT id, cidr_val, inet_val
                FROM comprehensive_test 
                WHERE cidr_val IS NOT NULL OR inet_val IS NOT NULL
                ORDER BY id
            """, binary=True)
            
            network_results = cur.fetchall()
            print(f"  ‚úÖ Network query returned {len(network_results)} rows")
            
            print("\nüéâ Comprehensive binary protocol test completed successfully!")
            print("‚úÖ All supported PostgreSQL binary types working correctly")
            print("‚úÖ NULL handling working properly") 
            print("‚úÖ Complex queries with binary parameters working")
            print("‚úÖ Data integrity maintained across all type conversions")
            
    finally:
        conn.close()

if __name__ == "__main__":
    test_comprehensive_binary()