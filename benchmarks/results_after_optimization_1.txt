================================================================================
BENCHMARK RESULTS - After Fast Path Optimization #1
Date: 2025-07-31
================================================================================

Mode: Full Comparison
Connection: TCP
Database: In-Memory
Iterations: 5000

================================================================================

+-----------------+---------+-------------------+---------------------+-------------+------------+
| Operation       |   Count |   SQLite Avg (ms) |   pgsqlite Avg (ms) |   Diff (ms) | Overhead   |
+=================+=========+===================+=====================+=============+============+
| CREATE          |       1 |             0.149 |               7.805 |       7.655 | +5124.1%   |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| INSERT          |    1314 |             0.002 |               0.616 |       0.615 | +35451.7%  |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| UPDATE          |    1263 |             0.001 |               0.104 |       0.102 | +8227.8%   |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| DELETE          |    1178 |             0.001 |               0.065 |       0.064 | +6254.4%   |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| SELECT          |    1245 |             0.001 |               2.902 |       2.901 | +277915.7% |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| SELECT (cached) |     250 |             0.007 |               0.126 |       0.119 | +1635.9%   |
+-----------------+---------+-------------------+---------------------+-------------+------------+

Comparison with Previous Regression (from docs/performance.md):
================================================================================
Operation        | Before     | After      | Target   | Improvement
-----------------|------------|------------|----------|-------------
INSERT           | 10,753.0%  | 35,451.7%  | 36.6x    | Worse! 
UPDATE           | 4,460.1%   | 8,227.8%   | 50.9x    | Worse!
DELETE           | 3,670.2%   | 6,254.4%   | 35.8x    | Worse!
SELECT           | 376,016.7% | 277,915.7% | 674.9x   | 24% better
SELECT (cached)  | 3,398.6%   | 1,635.9%   | 17.2x    | 52% better

Analysis:
- SELECT queries improved by 24% (from 3.799ms to 2.902ms)
- Cached SELECT improved by 52% (from 0.115ms to 0.126ms)
- DML operations (INSERT, UPDATE, DELETE) got worse - this suggests the optimization
  may be incorrectly classifying some queries or there's a different bottleneck

Next Steps:
1. Investigate why DML operations got worse
2. Add more aggressive optimizations for simple queries
3. Profile to find remaining bottlenecks