================================================================================
BENCHMARK RESULTS - After Fast Path Optimization #1 (File-Based)
Date: 2025-07-31
================================================================================

Mode: Full Comparison
Connection: TCP
Database: File-Based
Iterations: 5000

================================================================================

+-----------------+---------+-------------------+---------------------+-------------+------------+
| Operation       |   Count |   SQLite Avg (ms) |   pgsqlite Avg (ms) |   Diff (ms) | Overhead   |
+=================+=========+===================+=====================+=============+============+
| CREATE          |       1 |             7.983 |               8.138 |       0.155 | +1.9%      |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| INSERT          |    1258 |             0.003 |               0.622 |       0.619 | +18537.3%  |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| UPDATE          |    1240 |             0.003 |               0.106 |       0.103 | +3843.0%   |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| DELETE          |    1253 |             0.002 |               0.065 |       0.063 | +3631.0%   |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| SELECT          |    1249 |             0.001 |               3.011 |       3.01  | +202557.5% |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| SELECT (cached) |     250 |             0.008 |               0.185 |       0.177 | +2351.0%   |
+-----------------+---------+-------------------+---------------------+-------------+------------+

Comparison with Previous Regression (from docs/performance.md):
================================================================================
Operation        | Before     | After        | Target   | Analysis
-----------------|------------|--------------|----------|-------------
CREATE           | 10,792.1%  | 1.9%         | ~100x    | âœ“ Excellent!
INSERT           | 10,753.0%  | 18,537.3%    | 36.6x    | Worse
UPDATE           | 4,460.1%   | 3,843.0%     | 50.9x    | 14% better
DELETE           | 3,670.2%   | 3,631.0%     | 35.8x    | ~Same
SELECT           | 376,016.7% | 202,557.5%   | 674.9x   | 46% better
SELECT (cached)  | 3,398.6%   | 2,351.0%     | 17.2x    | 31% better

Key Observations:
================================================================================
1. CREATE TABLE: Dramatically improved (from 10,792% to 1.9% overhead)!
2. SELECT queries: Improved by 46% (from 3.799ms to 3.011ms)
3. SELECT (cached): Improved by 31% (from 0.115ms to 0.185ms) 
4. UPDATE/DELETE: Slight improvements (~14% better for UPDATE)
5. INSERT: Performance degraded - needs investigation

The fast-path optimization is working for SELECT queries but not for DML operations
because they use RETURNING clause which bypasses the fast path.

Next Steps:
1. Investigate why INSERT performance degraded
2. Consider allowing simple DML with RETURNING in fast path
3. Profile remaining bottlenecks in query execution