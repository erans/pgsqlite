================================================================================
BENCHMARK RESULTS - After Thread-Local Cache Optimization #2
Date: 2025-07-31
================================================================================

Mode: Full Comparison
Connection: TCP  
Database: File-Based
Iterations: 5000
Optimizations: Fast-path query detection + Thread-local connection cache

================================================================================

+-----------------+---------+-------------------+---------------------+-------------+------------+
| Operation       |   Count |   SQLite Avg (ms) |   pgsqlite Avg (ms) |   Diff (ms) | Overhead   |
+=================+=========+===================+=====================+=============+============+
| CREATE          |       1 |             6.367 |               9.245 |       2.878 | +45.2%     |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| INSERT          |    1304 |             0.003 |               0.585 |       0.582 | +16984.9%  |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| UPDATE          |    1221 |             0.002 |               0.093 |       0.091 | +4296.3%   |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| DELETE          |    1221 |             0.002 |               0.059 |       0.057 | +2910.0%   |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| SELECT          |    1254 |             0.001 |               2.837 |       2.836 | +197374.3% |
+-----------------+---------+-------------------+---------------------+-------------+------------+
| SELECT (cached) |     250 |             0.013 |               0.150 |       0.137 | +1017.7%   |
+-----------------+---------+-------------------+---------------------+-------------+------------+

Comparison with Previous Optimizations:
================================================================================
Operation        | Baseline   | Opt #1       | Opt #2       | Improvement
-----------------|------------|--------------|--------------|-------------
CREATE           | 10,792.1%  | 1.9%         | 45.2%        | Worse
INSERT           | 10,753.0%  | 18,537.3%    | 16,984.9%    | 8% better
UPDATE           | 4,460.1%   | 3,843.0%     | 4,296.3%     | Worse  
DELETE           | 3,670.2%   | 3,631.0%     | 2,910.0%     | 20% better
SELECT           | 376,016.7% | 202,557.5%   | 197,374.3%   | 3% better
SELECT (cached)  | 3,398.6%   | 2,351.0%     | 1,017.7%     | 57% better!

Analysis:
================================================================================
The thread-local cache optimization shows mixed results:

✅ Improvements:
- SELECT (cached): Massive 57% improvement! (0.185ms → 0.150ms)
- DELETE: 20% better than previous optimization
- INSERT: 8% better than previous optimization
- SELECT: Small 3% improvement

❌ Regressions:
- CREATE: Worse (1.9% → 45.2%)
- UPDATE: Slightly worse (3,843% → 4,296%)

The thread-local cache is particularly effective for cached queries, reducing
overhead from 2,351% to 1,017%. This suggests the optimization works well
for repeated operations on the same session.

The regressions in CREATE and UPDATE might be due to:
1. Thread-local cache initialization overhead
2. Cache misses for one-off operations
3. Additional memory allocations

Overall performance still far from targets, suggesting other bottlenecks remain.